/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 08.08.2023 02:44:28

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 6
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 3376;
#else
constexpr int kTensorArenaSize = 2352;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,507 } };
const TfArray<1, float> quant0_scale = { 1, { 0.053833801299333572, } };
const TfArray<1, int> quant0_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 39, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 39, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 20, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 20, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 10, 16, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data6[4] = { 1, 10, 1, 32, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data7[2] = { -1, 160, };
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data8[8*1*3*13] = { 
  /* [0][0][][] */ -110,127,-21,0,15,-20,-10,25,5,-16,48,-25,-8, 72,-69,21,46,52,-60,-74,13,-34,-8,8,37,11, -15,-85,-25,31,0,-50,-15,-38,53,0,-9,-8,41, 
  /* [1][0][][] */ -8,79,-6,110,-44,-38,34,-29,-39,-7,20,1,-20, 26,127,83,40,31,-18,-50,-61,-67,-30,41,-6,-8, -1,69,95,58,70,-29,-11,-54,-61,-21,8,-64,-1, 
  /* [2][0][][] */ 119,-63,-16,41,-38,72,-33,22,-66,31,31,-15,-4, 98,84,-71,-49,-13,110,5,-88,10,49,8,-47,-127, 100,97,-44,-23,21,-5,53,-23,-14,33,12,-37,-37, 
  /* [3][0][][] */ 34,-50,52,84,-38,-32,-59,-7,-29,41,26,13,15, 82,127,30,30,-86,-99,-92,-1,74,56,30,-20,-52, 33,75,-2,-50,-46,-37,39,39,16,-8,4,-30,0, 
  /* [4][0][][] */ 12,6,41,-32,-65,30,61,-3,-29,-11,15,9,6, 21,127,-6,-83,-88,30,37,7,-21,8,-6,24,-22, 39,38,64,-11,-87,-27,49,0,-9,-1,-11,7,9, 
  /* [5][0][][] */ 49,-23,-9,-34,50,1,-14,38,11,7,-42,-33,25, 127,7,-38,22,-25,11,-15,19,22,3,-34,1,3, 116,-33,-38,61,-23,-31,-54,2,52,-3,-34,-21,3, 
  /* [6][0][][] */ -92,48,1,14,-46,34,13,9,-11,6,-3,-13,-20, -127,-98,25,-2,23,-34,14,-25,-1,36,23,1,-3, -41,-36,-54,-24,-26,37,15,48,12,4,16,23,7, 
  /* [7][0][][] */ 127,-60,45,8,26,37,-26,-9,4,-14,-17,28,-13, 124,-78,54,-35,-8,-6,-32,22,-17,65,22,4,0, -74,-95,48,21,22,-12,1,23,22,18,-17,-1,-4, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant8_scale = { 8, { 0.0093355290591716766, 0.0055465484037995338, 0.0051081744022667408, 0.0065453611314296722, 0.0071687330491840839, 0.0074977590702474117, 0.0087112365290522575, 0.0080049131065607071, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[8] = { -2497, -3165, -6755, -3521, -4578, -3930, 1272, -2333, };
const TfArray<1, int> tensor_dimension9 = { 1, { 8 } };
const TfArray<8, float> quant9_scale = { 8, { 0.00050256703980267048, 0.00029859179630875587, 0.00027499243151396513, 0.00035236167605035007, 0.00038592013879679143, 0.00040363287553191185, 0.00046895898412913084, 0.00043093488784506917, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[16*1*3*8] = { 
  /* [0][0][][] */ -8,33,19,10,12,-127,16,-102, 30,-24,-105,-27,11,-2,-2,-6, -3,-58,43,60,-99,21,-44,-51, 
  /* [1][0][][] */ -3,-22,30,-85,-6,21,39,30, -22,102,-127,-57,-102,17,-66,19, 19,64,25,50,-11,-22,-116,-44, 
  /* [2][0][][] */ 17,48,-16,-15,-127,-6,-26,2, 19,-8,-2,-35,-46,-6,-4,13, -2,-26,-67,-21,-65,-92,-4,-9, 
  /* [3][0][][] */ -23,-13,17,11,-16,19,-65,2, 9,-9,-8,20,-21,45,-127,-57, 15,11,-25,15,-43,-2,-10,-2, 
  /* [4][0][][] */ -20,-4,-50,-11,36,-14,-30,75, 18,-95,1,-25,-127,-38,4,-23, -20,6,39,69,0,14,-9,-76, 
  /* [5][0][][] */ -32,29,-84,6,-24,6,16,-3, -80,-69,-24,-21,-61,44,-54,34, -86,-127,-99,-16,-72,4,-126,120, 
  /* [6][0][][] */ -51,-19,-33,127,-47,41,-59,-11, -40,-15,29,-82,-28,14,-107,-67, -89,-19,21,-70,32,-22,-36,-5, 
  /* [7][0][][] */ -20,-44,33,-36,-29,63,-79,36, -35,28,-14,20,33,-58,-38,-64, 38,-127,-59,-34,-99,-24,49,-6, 
  /* [8][0][][] */ -22,-12,-18,-39,-127,-19,5,-2, -17,-13,-15,-83,-41,-21,5,-19, -11,10,-87,-66,-11,1,2,9, 
  /* [9][0][][] */ -41,-52,20,-12,10,28,-18,3, -127,-3,12,0,21,23,-31,-1, -25,34,46,12,10,9,-14,-9, 
  /* [10][0][][] */ -115,1,30,-2,54,-23,-31,17, 20,26,-16,-11,-6,-39,2,13, -9,-22,-127,-47,-11,-81,2,-48, 
  /* [11][0][][] */ 12,-36,-2,-25,-4,-69,1,-10, 16,-3,-91,18,-74,-127,50,-12, -11,-9,4,-41,92,38,-11,-51, 
  /* [12][0][][] */ -73,-49,-80,12,97,-22,-102,-106, -69,-81,17,-4,16,-44,-99,-80, -56,68,53,-34,-71,66,-127,3, 
  /* [13][0][][] */ -27,39,-2,67,35,-59,-66,-56, -34,-13,55,62,34,-127,10,-36, -1,-93,-6,-54,-17,38,17,-27, 
  /* [14][0][][] */ -4,19,-2,-12,34,-28,-65,-50, -17,-10,-127,14,58,7,-102,-71, -15,42,-29,19,16,-14,-39,-36, 
  /* [15][0][][] */ 1,-118,-112,112,15,-3,-21,54, -14,-19,-104,-56,-38,19,-45,-112, 19,-94,-7,-99,-127,43,-99,-16, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant10_scale = { 16, { 0.0096571166068315506, 0.0049839140847325325, 0.009470747783780098, 0.015928026288747787, 0.010136722587049007, 0.0048325024545192719, 0.0096575366333127022, 0.00879684928804636, 0.02315082773566246, 0.009683702141046524, 0.012507639825344086, 0.0077000632882118225, 0.0082886824384331703, 0.0070384587161242962, 0.0078447051346302032, 0.0070957406423985958, } };
const TfArray<16, int> quant10_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[16] = { -432, -21, 2743, -1163, -2911, 3027, 34, -115, 1061, -1374, -1660, 396, 217, -3268, 430, 28, };
const TfArray<1, int> tensor_dimension11 = { 1, { 16 } };
const TfArray<16, float> quant11_scale = { 16, { 0.00058892881497740746, 0.00030393860652111471, 0.00057756330352276564, 0.00097135343821719289, 0.00061817705864086747, 0.00029470495064742863, 0.00058895442634820938, 0.00053646636661142111, 0.0014118282124400139, 0.00059055013116449118, 0.00076276488834992051, 0.00046958003076724708, 0.00050547631690278649, 0.00042923277942463756, 0.00047840084880590439, 0.00043272608309052885, } };
const TfArray<16, int> quant11_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[32*1*3*16] = { 
  /* [0][0][][] */ -32,-12,20,-5,11,-127,6,-34,-21,-63,20,-7,-98,15,-5,11, 14,-28,-5,-2,7,-6,-44,-14,12,-7,-18,-2,-11,-14,-26,-47, 1,-20,-39,24,-20,-23,-15,6,-88,28,-5,-55,-9,-18,-20,1, 
  /* [1][0][][] */ -7,-8,-7,2,14,-15,-119,-37,24,-27,-53,3,-3,-47,-127,-9, 14,0,-31,-19,-69,26,41,-24,-70,-17,-3,-11,4,-26,-68,14, -4,8,26,-47,18,-26,-23,13,-71,-11,-4,-3,-112,-40,-82,-31, 
  /* [2][0][][] */ -27,15,8,-84,-9,-71,-25,-16,0,-91,-32,23,2,-44,-42,-26, 19,-15,-8,81,10,-48,-68,-48,-13,-10,-13,-18,-101,-63,20,-38, -29,-11,0,-127,20,52,-76,-23,-31,-21,-40,-12,-20,-46,-77,-71, 
  /* [3][0][][] */ -46,-81,-46,18,-2,-10,-12,-127,-39,14,13,2,-6,-9,4,31, -44,-5,-94,-8,-29,11,-10,-42,-27,-5,-21,-60,21,-15,5,-27, -23,22,6,4,-46,-40,3,-14,-57,12,4,-35,13,-10,-3,-25, 
  /* [4][0][][] */ 7,39,-20,22,28,13,45,-86,-118,-24,10,-48,-48,10,-18,30, -63,4,-79,-55,3,-127,9,0,-95,1,10,-32,-34,8,-17,-91, -11,7,19,-46,-82,-1,-33,-19,6,16,12,26,-8,1,26,-3, 
  /* [5][0][][] */ 9,19,-5,-8,39,-2,-17,4,-7,-127,-60,15,-49,-11,-20,-1, 15,-1,-10,-95,7,-22,-26,18,-78,-85,12,-12,-66,-19,-64,-9, 14,-6,-6,-7,-63,8,5,5,0,-43,-116,0,-33,-29,-32,23, 
  /* [6][0][][] */ -37,-21,-27,15,14,-30,-1,5,-101,22,1,-127,-10,6,0,-12, 10,-15,-9,3,14,-1,-7,3,-16,-18,-7,-9,-3,10,-8,-17, 7,3,-14,-13,-15,20,-5,5,-7,-7,-17,-58,4,-5,-8,16, 
  /* [7][0][][] */ 11,-2,3,17,0,4,-52,17,-12,-125,-37,13,-30,-17,-127,-12, 5,0,-23,-3,11,-1,-31,-4,-9,-11,-19,4,13,-47,-19,-11, -5,-11,20,-15,5,9,-12,18,-51,-51,9,-7,3,-16,-42,-8, 
  /* [8][0][][] */ -36,15,11,24,-127,-4,-58,22,40,-71,-109,-12,-56,-28,18,-21, -67,23,-27,1,-35,18,-51,12,24,-18,8,-10,-14,27,13,-76, -24,-1,-24,49,-42,-23,-4,-19,31,-14,-28,-8,28,34,-17,-50, 
  /* [9][0][][] */ -17,7,-16,-80,20,-5,-4,18,-35,22,-10,4,7,9,-33,-2, 14,-127,-107,-74,-26,-113,2,0,-39,-3,-1,-19,-40,23,11,15, 3,6,-20,-52,-8,-2,-22,15,4,-17,28,5,-10,15,-22,14, 
  /* [10][0][][] */ -50,0,-54,-18,-13,3,-12,15,-12,14,0,17,-12,4,26,-89, -41,-18,-97,9,-11,19,1,-21,35,-5,-66,-35,6,14,-7,-18, -45,21,-2,34,-13,17,-7,-6,-122,27,-9,-127,17,-1,-14,-16, 
  /* [11][0][][] */ 23,-14,-3,13,-20,22,-11,-16,10,21,-1,12,12,-30,-14,-16, -16,1,3,-16,6,24,-24,10,-6,-2,-1,-71,-112,-127,-45,-2, -13,19,-52,-15,10,-5,9,-4,-86,-7,-20,-13,-41,23,20,-64, 
  /* [12][0][][] */ -8,4,2,16,33,29,-79,-22,4,-12,-3,-58,44,11,31,-15, -31,5,-32,-17,14,-7,2,-80,-7,-16,-8,-8,-5,-4,25,-14, -14,-88,-127,-40,-121,18,36,7,-17,10,7,12,21,12,-4,-8, 
  /* [13][0][][] */ -9,-45,-44,14,-43,-28,0,16,-60,36,23,-56,-29,8,-10,-37, 34,-112,-53,-25,-114,-24,-19,-27,-37,-28,-31,-1,4,-12,-96,-30, 2,-3,-21,-42,13,-127,-3,26,3,-17,18,19,44,-75,-83,32, 
  /* [14][0][][] */ 16,23,7,-86,-30,-20,-90,-38,36,-127,-4,-18,-56,11,-29,-100, 14,28,-26,0,-24,27,10,-79,6,-21,-119,-14,5,-5,4,35, 22,11,-64,9,-31,-15,12,-8,-32,0,-21,-25,11,14,-32,22, 
  /* [15][0][][] */ -4,-19,-5,-1,-106,-2,-27,-1,3,-127,-39,2,-48,-39,-10,-10, -2,5,-5,-18,1,-5,-21,-3,11,-31,7,1,-18,-36,-3,-56, 9,18,-49,8,-10,-3,6,15,-8,-11,-42,-7,-7,10,-10,-2, 
  /* [16][0][][] */ -36,-101,1,-63,-41,-5,-127,-2,2,33,-58,15,30,-60,-8,-23, 11,-1,-7,-29,-30,-106,-48,-12,16,14,27,19,-28,26,-8,-24, -18,-10,-12,-9,2,-54,-47,4,-36,33,-18,16,29,-30,13,-25, 
  /* [17][0][][] */ -15,-4,-127,-2,5,-5,11,1,-48,12,11,-9,-42,7,-8,11, 10,4,0,-25,-79,-37,1,-8,-10,17,5,-15,-1,-4,-11,-4, 6,-10,4,-26,-11,-25,-12,-1,-8,-25,-38,-8,13,-7,-12,-37, 
  /* [18][0][][] */ -6,-27,15,23,17,-25,-2,2,12,3,8,3,-19,21,23,-2, -7,-28,-3,-32,-21,19,-26,18,-1,-29,-4,-9,19,-1,-24,-15, -27,-3,-18,5,9,20,-28,-6,-10,17,-88,-29,-36,-10,-127,-28, 
  /* [19][0][][] */ -15,-12,-7,14,-16,-57,17,-75,3,9,13,-16,-21,11,-28,-7, 10,-12,3,-10,25,-127,-6,-25,10,-21,-14,-2,1,-18,23,-12, 9,1,12,3,14,-23,2,-24,-23,-22,-7,-33,9,-80,-1,-3, 
  /* [20][0][][] */ -60,4,-5,-3,-48,-53,-3,-36,-127,9,2,-112,3,-24,9,13, -1,-1,6,-16,-30,1,5,-48,-10,4,-6,-49,16,-34,-10,2, -52,12,10,7,-81,4,-89,-15,7,3,-9,0,-28,-63,20,13, 
  /* [21][0][][] */ -49,0,-32,5,-11,51,-16,31,-116,-1,-28,-47,44,16,-76,-18, 8,5,15,59,-72,-4,-57,-4,-29,-22,-59,-79,-27,-30,-6,13, -11,2,38,15,-118,-46,-62,7,42,-96,-127,-50,-11,6,-22,-4, 
  /* [22][0][][] */ -20,-104,-2,10,-6,-19,23,15,-94,8,-20,-44,6,-1,26,9, -55,-26,2,1,-17,23,-77,16,-7,-30,-68,-15,27,-66,-127,-16, 11,-29,-4,-17,-10,15,-25,13,7,1,15,0,35,-76,-37,-15, 
  /* [23][0][][] */ -9,4,3,-27,-115,-8,-27,-13,4,-37,-127,-20,-44,-24,14,8, -10,-23,-14,-28,-10,-6,-11,-18,7,-15,-79,24,-3,-8,29,1, -43,-16,-70,5,-52,-15,-25,2,-123,30,8,-14,-7,-6,3,-12, 
  /* [24][0][][] */ -9,32,9,46,18,22,-28,-65,7,-66,95,7,24,45,-58,-68, -36,7,-31,-7,-10,6,-60,-9,-127,107,-57,23,-39,-39,5,-74, -42,-14,-10,17,71,6,-106,16,-83,-63,5,-41,-40,29,-18,-5, 
  /* [25][0][][] */ 14,-29,12,5,-35,14,1,-6,-27,-49,-59,-7,-12,0,-25,20, -5,0,-17,-23,-35,-2,2,15,-127,-23,17,-41,16,-51,18,26, 8,-2,-26,-52,-14,-4,-5,-28,-61,5,6,2,-29,-9,-26,21, 
  /* [26][0][][] */ -16,32,-31,-12,25,33,47,31,-21,-32,-120,-15,24,-17,-39,36, 16,27,-98,-35,31,-64,35,2,-61,-13,-11,-61,3,13,-52,-31, -7,-28,-127,19,-78,-68,31,-18,-21,3,7,27,-2,-28,61,45, 
  /* [27][0][][] */ -28,-31,9,-38,28,12,-127,4,-28,-17,-21,11,13,-12,-1,-4, -8,3,-8,-32,15,-27,-10,-24,-13,-1,11,-1,2,-7,-2,-7, -9,-8,-123,-14,-60,-58,0,-6,-105,8,-3,-1,5,1,17,-16, 
  /* [28][0][][] */ 5,-28,-127,4,-10,-18,-13,2,-78,10,-67,3,-20,-9,-7,-28, -3,-16,-40,-13,-48,11,-5,4,-51,2,-2,-25,-25,7,-15,-41, 22,-3,-4,-10,-5,-11,2,1,14,-30,-16,-12,2,15,-4,0, 
  /* [29][0][][] */ -3,-12,-103,10,-38,-6,4,-9,-35,3,-6,-59,15,-1,17,7, -22,11,-2,3,-21,-69,12,-4,-63,4,-2,-34,-11,-21,1,-16, -12,4,17,-9,-127,-17,14,-15,-22,15,14,-23,-8,-17,7,-23, 
  /* [30][0][][] */ -2,15,-6,11,-9,24,-12,15,-7,-11,-127,2,-64,-20,-2,-3, -15,-5,-18,0,-10,-22,-12,-1,5,-26,-4,-4,0,-2,6,2, -9,-6,11,19,-58,2,-7,7,6,-34,-8,4,1,15,-6,-7, 
  /* [31][0][][] */ 24,-7,4,26,-28,-19,-42,-35,9,-8,-8,-23,12,-24,28,-25, -18,-53,-12,1,-61,-14,5,-11,-127,-15,-52,-41,30,34,12,0, -21,-90,-6,-4,-63,28,15,-73,31,21,-62,-26,-21,-6,39,-1, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant12_scale = { 32, { 0.02299649640917778, 0.016552530229091644, 0.012596717104315758, 0.024318302050232887, 0.012033612467348576, 0.017938194796442986, 0.030669067054986954, 0.021408686414361, 0.014401665888726711, 0.014152314513921738, 0.018141910433769226, 0.017959335818886757, 0.016984757035970688, 0.01205193717032671, 0.017013724893331528, 0.031160324811935425, 0.012491371482610703, 0.025420213118195534, 0.023035934194922447, 0.026857346296310425, 0.022763749584555626, 0.0098953526467084885, 0.022762499749660492, 0.019205749034881592, 0.0096940482035279274, 0.022332457825541496, 0.011646788567304611, 0.023628946393728256, 0.031401656568050385, 0.025682179257273674, 0.033867731690406799, 0.016263030469417572, } };
const TfArray<32, int> quant12_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[32] = { -450, 386, -491, -285, -1427, 499, -12, 476, -695, -295, -1611, -1643, -2035, 378, -721, -214, -1154, 165, -1189, -506, -86, -290, -1413, -449, -2008, 829, -1586, 2, 604, -677, 76, -711, };
const TfArray<1, int> tensor_dimension13 = { 1, { 32 } };
const TfArray<32, float> quant13_scale = { 32, { 0.0015846387250348926, 0.0011405990226194263, 0.00086801248835399747, 0.0016757214907556772, 0.00082921015564352274, 0.0012360821710899472, 0.0021133390255272388, 0.0014752262504771352, 0.00099238764960318804, 0.00097520533017814159, 0.0012501197634264827, 0.0012375389924272895, 0.0011703828349709511, 0.0008304729126393795, 0.0011723788920789957, 0.0021471905056387186, 0.00086075335275381804, 0.0017516518710181117, 0.0015873563243076205, 0.0018506816122680902, 0.0015686006518080831, 0.00068186729913577437, 0.001568514620885253, 0.0013234266079962254, 0.00066799588967114687, 0.0015388813335448503, 0.00080255500506609678, 0.0016282194992527366, 0.0021638202015310526, 0.001769703347235918, 0.0023337521124631166, 0.0011206502094864845, } };
const TfArray<32, int> quant13_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[6*160] = { 
  4, -14, -57, -7, 12, -7, -14, -7, 1, -97, -43, -1, -10, 3, 9, 13, -42, -54, -49, -10, 0, -6, -43, -42, -25, 18, -7, -24, -22, 7, -9, 7, -12, -3, -87, 19, 7, 9, -19, -9, -4, -12, -28, 4, 0, -7, 22, 17, -60, 8, -68, 23, 7, -12, -116, -83, -23, 12, 18, -33, -21, 18, -16, 12, 7, 0, -50, 20, 18, 17, -21, -28, 1, -11, -39, -6, 6, -49, 26, 11, -26, 9, -47, 11, 17, -12, -31, -47, -49, 8, 30, -34, -43, 15, -5, 8, 6, 0, -34, 19, 24, 1, -14, -10, -6, -9, -23, -8, -8, -42, 26, 14, -25, 13, -24, 28, 13, -20, -25, -33, -25, 11, 16, -16, -27, 11, -34, 13, 2, -17, -29, -4, 16, -11, -17, 12, 3, -5, -10, -60, 2, -22, 0, 7, -16, 2, -23, 9, 16, -5, 11, -29, -50, -15, 21, -79, -13, 18, -16, 0, 
  -19, 11, 3, -12, -18, 9, -7, 15, -28, -53, -19, 5, -18, 1, -26, -9, -51, -31, -7, -38, -6, 11, -14, -43, -6, 2, -15, -66, 13, -38, 15, -6, -59, 26, 3, -35, -48, 12, -18, 39, -24, -56, -64, -26, -91, -4, -16, -32, -61, -38, -12, -41, -1, 11, -43, -83, -49, 6, -38, -74, -11, -48, 10, -11, -31, 10, 9, -56, -54, 30, -47, 27, -9, -77, -17, -32, -20, -20, -25, -2, -14, -55, -22, -101, -40, -16, -42, -37, -41, 2, -87, -76, 6, -95, 18, -63, 18, 28, -3, -54, -63, 20, -33, 18, -31, -76, -33, -40, -48, -46, 12, -3, -38, -73, -12, -64, -26, -5, -52, -46, -7, 20, -22, -29, -10, -60, 6, -32, -61, 38, -2, -87, -62, 22, -19, 4, -32, -62, -30, -2, -32, -43, -12, -74, -103, -38, -1, -61, -21, 14, -57, -127, -41, 24, -55, 2, 16, -49, 8, -46, 
  2, -7, -31, 5, -22, -8, -35, 5, -11, -38, 21, -37, -13, -15, -65, -34, 30, -21, -25, 7, 4, -17, -36, 20, -4, -5, -33, 15, 0, -37, 6, 4, 8, -17, -10, 33, -87, -6, -58, 2, -9, -31, 13, -59, -17, -7, -29, -43, 19, -21, -90, -22, 11, 2, -51, 17, -10, -21, -28, 19, -23, 34, -2, -2, -27, -49, -64, 25, -20, -5, -33, -31, 9, -22, 10, -62, -19, -26, -60, -76, 10, -13, -44, -16, 24, 17, -4, 14, -15, 7, -53, 4, -9, 21, 0, -12, -30, -13, -38, 18, -51, 0, -29, -17, -3, 8, 17, -14, -5, -18, -72, -77, 15, -13, -46, -21, 15, 21, -28, -3, -8, -28, -41, 18, -16, 17, -3, -2, 7, -34, -53, 19, -26, 6, -8, -8, 9, -12, -8, -109, 8, 4, -26, -29, 14, -23, -23, -8, 15, 27, -19, 0, 11, 3, -96, 32, -47, 13, -2, 1, 
  -77, 15, 5, -39, 11, 7, -2, 16, -18, -13, -13, 19, 20, -61, -32, -25, -44, -8, 11, -31, -46, -34, 7, -71, 3, -5, 0, 4, -8, 6, -1, -21, -99, 19, 16, -37, 11, -26, -4, 11, -23, 12, -2, 22, 16, -8, -9, 0, -28, 2, 18, -11, -52, -37, -27, -35, 16, -5, 17, 21, -20, -21, -18, -31, -35, 24, 32, -19, 17, -8, -21, 18, -22, 21, -42, 20, 21, 10, -3, -17, -33, 17, 17, -15, -42, -36, 8, -32, 10, -5, 29, 21, -2, -37, -21, -17, -7, 23, 22, 0, 25, -26, -6, -10, -2, 23, -9, 4, 4, 22, -9, -24, -29, 21, 7, -28, -12, -52, -1, -55, 13, -12, 12, 35, 2, -20, -6, -30, -4, -9, 36, -14, 25, 4, -12, -3, -15, 14, -27, 16, 0, 12, -42, -15, -20, 11, 0, -12, -29, -48, -27, -29, -10, -39, 27, 1, -2, -22, 3, -29, 
  -2, -22, -7, -17, -21, -8, -33, -26, 18, 0, 9, 18, -4, -14, 8, 16, 11, -47, 9, 3, -10, -8, 1, 4, 0, -62, -8, -5, -28, -3, 2, -2, -14, -15, 1, 6, 7, -16, 9, -21, 14, -6, 9, 9, 12, -6, 14, 14, 4, -17, 23, -2, -6, 11, 10, -3, 0, -24, 8, 4, -6, 11, 7, 19, -7, -18, -15, 1, 5, -21, 19, -3, 16, 6, 2, 5, 8, -17, 17, 6, -9, -4, 15, 8, -7, 18, 18, 7, 5, -25, 23, -9, -5, 12, 13, 20, -1, -16, -16, 0, 15, -16, 8, -1, 10, 6, 13, 0, 6, -5, 14, -2, 15, -13, 6, 2, 0, 14, 2, -8, 8, 2, -1, 4, 5, -4, 13, 18, 5, -34, -29, -31, 1, -10, 7, -3, 16, 1, 10, -2, -19, -4, -10, 12, 20, -15, 15, -17, -2, 17, -12, -22, 20, -5, -6, -14, -13, -2, 13, -3, 
  16, 0, -25, -11, -12, -7, -10, 7, -15, 13, -36, -15, -14, 18, -21, -16, 18, 5, -4, -28, 9, 4, -49, 11, 14, 4, -31, 6, 18, 15, 2, -53, 24, -5, -25, -32, -7, -24, 10, -5, -28, 16, -41, -10, -22, 18, -8, -22, 14, 8, 6, -8, -13, -1, -47, 7, 21, -8, -10, 1, 8, -29, -21, -9, 15, -24, -15, -7, -16, -8, 10, -3, -15, 9, -21, -32, -35, 18, -2, -45, 3, 12, -6, -3, -10, -5, -4, 12, 21, -4, -1, 4, 33, -24, -30, -27, 18, -1, -29, -14, -9, -11, 12, -13, -21, 12, -6, -42, -36, 12, -18, -14, 22, 18, -6, 14, -7, -18, -27, 6, 13, -10, -45, -4, 12, -30, -14, -11, 12, -10, -34, -9, -14, -4, 9, -3, -6, 0, -47, -34, -57, 0, -20, -4, 20, 11, -21, -7, 6, 3, -20, -12, 14, 0, -2, -12, 18, -16, -15, -16, 
};
const TfArray<2, int> tensor_dimension14 = { 2, { 6,160 } };
const TfArray<1, float> quant14_scale = { 1, { 0.011772205121815205, } };
const TfArray<1, int> quant14_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[6] = { -683, 2000, -262, -1065, -221, 590, };
const TfArray<1, int> tensor_dimension15 = { 1, { 6 } };
const TfArray<1, float> quant15_scale = { 1, { 0.00065454229479655623, } };
const TfArray<1, int> quant15_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,39,13 } };
const TfArray<1, float> quant16_scale = { 1, { 0.053833801299333572, } };
const TfArray<1, int> quant16_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,39,8 } };
const TfArray<1, float> quant17_scale = { 1, { 0.060983918607234955, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,39,1,8 } };
const TfArray<1, float> quant18_scale = { 1, { 0.060983918607234955, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,20,1,8 } };
const TfArray<1, float> quant19_scale = { 1, { 0.060983918607234955, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,20,8 } };
const TfArray<1, float> quant20_scale = { 1, { 0.060983918607234955, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,20,16 } };
const TfArray<1, float> quant21_scale = { 1, { 0.068907834589481354, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,20,1,16 } };
const TfArray<1, float> quant22_scale = { 1, { 0.068907834589481354, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,10,1,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.068907834589481354, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,1,10,16 } };
const TfArray<1, float> quant24_scale = { 1, { 0.068907834589481354, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,1,10,32 } };
const TfArray<1, float> quant25_scale = { 1, { 0.05560065433382988, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,10,1,32 } };
const TfArray<1, float> quant26_scale = { 1, { 0.05560065433382988, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,5,1,32 } };
const TfArray<1, float> quant27_scale = { 1, { 0.05560065433382988, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,160 } };
const TfArray<1, float> quant28_scale = { 1, { 0.05560065433382988, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,6 } };
const TfArray<1, float> quant29_scale = { 1, { 0.28577899932861328, } };
const TfArray<1, int> quant29_zero = { 1, { 55 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,6 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,2 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 18 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,3 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,4 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 22 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,5 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 24,12,13 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,6 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,7 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,14,15 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension0, 507, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 507, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension17, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension19, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension21, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension23, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension24, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension25, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension27, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension29, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
  if (i < 0) {
    tensor->data.data = nullptr;
    tensor->dims = nullptr;
    return;
  }

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus tflite_learn_8_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 31;
  for (size_t i = 0; i < 31; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_8_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteStatus tflite_learn_8_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_invoke() {
  for (size_t i = 0; i < 15; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
