/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 11.08.2023 06:30:31

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 4720;
#else
constexpr int kTensorArenaSize = 3696;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,403 } };
const TfArray<1, float> quant0_scale = { 1, { 0.052154585719108582, } };
const TfArray<1, int> quant0_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 31, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 31, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 16, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 16, 1, 64, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 512, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data6[6] = { -741, 1133, 98, -643, -513, 907, };
const TfArray<1, int> tensor_dimension6 = { 1, { 6 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00080369057832285762, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[6*512] = { 
  -10, 8, -20, -13, -18, 23, -11, 5, -3, -25, 0, -14, 1, -20, 8, -10, -48, 19, -28, -3, -7, 14, -5, 10, -3, -4, 5, -11, 5, -47, -1, -16, -21, -1, -19, -11, 2, -11, -33, 2, -22, -14, 8, 0, 12, -20, 4, 5, 1, -17, -2, -24, -32, -8, 7, 0, -18, -2, 17, 10, -19, -14, 6, -33, -9, -8, 12, 2, -13, 18, -2, -1, 1, -27, -6, -33, 16, -4, 15, 1, 22, 36, -19, -25, -31, -8, 0, 22, -15, 11, -8, -35, 8, -26, 10, 4, 1, -29, -23, -11, 11, 3, -36, 18, -29, 10, -46, -13, -3, -5, -13, 1, -7, -21, 3, 14, 26, 12, -13, -4, -35, -11, -6, 13, -13, -5, 7, -3, -14, 7, 10, -7, -1, 16, -9, -4, -28, -36, -14, 1, -48, -4, 17, -4, 2, 12, -34, -13, -25, -4, -4, 18, 9, 5, -24, -56, 20, -8, 16, -11, 29, -33, -12, -36, 13, 10, -36, 14, -19, 15, -43, 2, 10, 8, -42, 1, 11, -36, 11, 27, 15, 1, 0, -6, -24, 5, -19, 15, -42, -12, 9, 20, -32, -3, 4, -9, -12, 9, -2, -10, 10, -24, -10, -9, -24, -12, 20, -4, 5, 17, -25, -1, -20, -17, -10, 23, -3, 2, -33, -66, 27, -18, 28, -30, -17, -33, -4, -33, 7, -9, -32, 14, -8, 15, -31, 2, 15, -3, -18, 8, 9, -24, -6, 22, 13, -1, -16, 12, -12, -4, 2, 13, -25, 9, 13, 26, -16, 2, -9, 11, -22, 14, 4, -1, 13, -49, -9, -7, -10, -21, 19, -2, -14, 22, -15, -18, -8, -4, -8, 16, 0, 4, -36, -81, 47, -13, 15, 0, -19, -37, -17, -20, 19, -11, -25, 4, -13, 15, -33, -12, 13, -15, -10, 2, 0, -32, 5, 27, 24, 22, -5, 16, -22, -3, -16, 19, -27, 7, 7, 2, -32, -6, 14, -14, -20, 15, -19, -2, 6, -67, -1, -6, -11, -31, 4, -17, 8, 10, -36, -15, -25, -11, 15, 12, -30, 10, -20, -79, 0, -25, 17, -25, -19, -29, -16, -37, -5, -50, -53, 9, -3, 9, -6, -8, 11, -6, -27, 3, 1, -19, -3, 13, 14, 18, -2, 21, -21, -3, -31, 3, -35, -10, 9, 5, -27, -2, -15, -15, -12, 14, 7, 0, 4, -8, -7, -5, 12, -4, 0, -20, 12, 28, -1, 10, 3, -18, -6, 5, 13, -9, -9, -11, 6, -18, 12, -42, 3, -34, -13, -29, 6, 0, -3, 18, -3, 11, -89, 0, 10, -6, -14, -8, 2, -9, -5, 16, 13, -2, 12, 9, -7, 2, -39, 14, -34, 21, 12, -11, -3, -4, 1, 0, -1, 6, -6, 7, 7, -19, 0, -4, -21, -9, 14, -13, -11, 2, -15, -29, -11, -6, -4, 6, 4, 2, -3, 4, -44, -2, 2, -9, 3, -9, -14, -19, 9, -33, -1, 6, -19, 10, -1, 11, -2, 7, 18, 1, -2, -5, 0, -2, 15, 19, 17, 7, -28, -3, -24, 21, -6, -5, -11, -39, 
  4, 14, 1, -1, 22, -14, -4, 13, -38, 4, 14, -11, 3, -3, -7, 5, 28, -7, 4, 3, 1, -6, 1, -7, -2, -15, -7, 5, -27, -3, 19, -5, 11, 8, -9, 6, 9, 9, 4, -28, -1, 3, -40, 5, -6, -18, -12, -5, 3, 1, 11, 13, -30, -23, -22, -3, -6, 1, -29, -7, -8, -19, -5, -42, 8, 1, -21, -11, -18, -7, -3, 9, -8, -12, 7, -22, -14, -25, -16, 3, 7, -13, 14, -7, -13, -18, 5, -8, 1, -10, -2, -6, -4, -40, 3, -2, 4, 5, 16, 2, -20, -18, -8, -31, 7, -56, -34, -21, -8, 3, -11, -1, 4, -28, 5, -23, -48, -4, -3, -8, -14, 5, -127, -22, -27, 2, -1, 5, 11, -8, -7, -28, -15, -10, -10, 14, 1, -14, 15, -25, -13, -36, -2, 4, 17, -18, -1, -15, -29, -8, -6, -11, 10, -17, -18, 4, -47, -19, 11, 9, -13, 12, 7, 10, -17, -3, 2, -37, -25, -23, -52, 6, -32, -25, -7, 4, -10, -5, 15, -18, -52, -17, -7, -15, -30, 5, -58, -76, -7, -6, -20, -1, -9, -5, -14, -6, -18, -23, -2, 17, -5, -1, 5, -44, 1, -9, -9, -7, -17, -43, -10, 1, -26, -7, -1, -25, -9, -4, -13, -3, -56, -18, -6, -58, 6, 13, -7, 2, 8, 48, 6, -10, -10, -62, -36, -27, -50, -25, 8, 1, 5, -19, 10, -31, -79, 1, 3, -17, -78, -1, -40, -63, -3, -1, -30, 3, -1, -7, -25, -2, -26, -24, -9, 12, -12, -21, 12, -64, -19, -5, -5, -7, -3, -31, 1, 18, -25, 1, 5, -13, 13, 1, -16, 8, -13, -4, 9, -15, 14, 9, -11, 10, -11, 16, -16, -18, -9, -70, -21, -11, -28, -10, -43, -2, 1, -19, 9, -63, -80, -12, -10, -16, -34, -4, -10, -31, 7, -6, -20, -3, -16, -4, -15, 3, -16, -21, -3, 10, -19, -25, 6, -43, -22, -21, -3, -2, -38, 0, -15, -10, -42, -21, -9, -25, 10, -4, -17, -2, -1, -37, 5, -26, 0, 6, 7, 2, 6, 3, -8, -26, -25, -47, -6, -28, -40, -11, -22, 3, 3, -13, 10, -20, -31, 0, -10, -24, -14, 2, -21, -54, -7, 1, -32, -19, 7, 0, -4, 2, -3, 5, -10, 13, -5, -25, 14, -48, -25, -11, -2, -8, -19, -8, -3, -8, -32, -14, -5, -15, 7, -11, -22, -11, 16, -40, 7, -11, 18, 8, 8, 5, -9, 31, -13, -28, -18, -33, -16, -1, -11, -12, -29, 2, 7, 1, 6, -24, -10, -4, 4, -14, -28, -2, -14, -22, 10, -10, -9, 45, 9, 9, 9, 5, -28, 8, 1, 4, -6, 9, 7, -23, 10, -14, -8, -2, -7, -24, 3, 0, -21, -24, -3, -3, -4, -20, -23, -17, 31, -40, 6, -6, -18, 2, 11, 0, -23, 18, -10, -30, -4, -16, 6, -12, -31, -10, -15, 3, 6, -7, 13, 3, -8, -15, -5, 0, 18, -8, 18, -21, -10, -9, 5, 6, 
  -13, 5, -8, -8, -32, -59, 1, 3, 6, -6, -2, -16, -28, -6, -13, -9, -16, -25, -11, -18, -37, 1, 3, -28, -3, 3, -5, 1, -65, 18, -25, -3, -18, -6, 9, -32, -6, -26, 9, 1, -2, -5, 21, -8, -4, -50, 18, -2, -16, 24, -1, -20, -9, 6, 14, -6, 10, 5, 27, -11, 4, 4, -25, -49, -25, -2, -7, 8, -20, -44, -3, 0, -1, -3, -6, -3, 2, -11, -23, -18, -19, -35, 17, -38, -43, -11, 0, -51, 8, 7, -30, -19, -5, 16, -7, 7, -4, -5, -9, -15, -22, -17, -5, 6, 3, 30, 21, 20, 15, 12, -3, -2, 4, 19, 3, -47, -37, 2, -6, -26, 8, -7, 17, -45, 11, 3, -50, -16, -24, 1, 0, 5, -16, -8, 10, -7, 0, -10, -6, -28, -18, -13, -28, -17, -8, -28, -14, -8, -17, -19, -7, -40, 8, -3, -9, -31, -32, 8, -47, 0, 9, 3, -18, -54, -20, -57, -24, 1, 8, 13, 26, 14, 16, 17, -13, 3, 12, 17, 6, -35, -31, 24, 25, 5, 16, 4, 31, -42, 16, 19, -27, -2, -12, 10, -8, 12, -17, -28, 10, -15, 11, -50, -1, -23, -8, -20, -43, -3, -13, -45, 1, -22, -18, 4, -3, -45, 4, 14, -19, -2, -65, 6, -31, 3, -34, -26, -18, -57, -25, -39, -39, 5, -2, 26, 17, 13, 15, 22, -4, 6, -3, 10, -12, -17, -36, -16, 13, 12, 5, -7, 15, -24, 7, 0, -47, 7, -9, 7, -2, -16, -7, -51, -7, -8, 11, -3, -14, -3, 6, -43, -31, -3, 4, -57, 9, -19, -9, -19, -13, -50, -3, 14, -12, -69, -62, 7, -48, -8, -25, -17, -15, -23, -31, -58, -26, 10, -6, 19, 27, 8, 16, 24, -24, 0, -8, 18, 4, -35, -35, 19, 3, 14, 14, 0, 28, -21, 4, 1, -70, -1, -6, 4, 2, 5, -6, -14, 17, -19, 24, -19, -3, -6, -9, 4, -6, -5, -6, -9, 22, -28, -17, -3, -14, -8, -6, 12, -7, -53, -64, 6, -42, 6, 0, -9, -5, -58, -22, -18, -19, 2, -8, 9, 21, 18, 12, 15, -17, 1, -17, 11, 0, -18, -33, -12, -7, 11, 5, 5, 18, -11, 7, 8, -36, -11, -18, 7, -14, -2, -32, -29, 13, -4, 16, 1, -6, -1, -3, -28, 3, -15, 7, -33, -10, -50, 5, -12, -6, -9, -10, 8, -9, -41, -47, 14, -30, -19, -16, -10, -25, -8, -29, 10, 2, 23, 3, 9, 13, 4, 10, 11, 2, -3, -4, 15, -6, -35, -32, -6, 11, 5, 4, 0, 4, -11, 14, 9, -36, -49, -26, 2, -2, -11, 5, -2, -9, -2, 15, -14, -4, -9, 17, -4, 2, 4, 23, 0, 0, -24, -8, 2, -13, 9, -16, -3, -12, 1, -48, 6, -23, 3, -6, 3, -40, -22, 2, -30, 3, 4, 6, -3, -6, 6, -3, -6, 10, 3, 2, 13, 5, -16, -18, 0, 7, 4, -58, -5, 5, -70, -4, 0, -21, -12, 
  -2, -8, -7, -2, -37, -4, -11, -5, -2, 24, 3, -33, -31, -13, -8, -18, -36, -14, 17, 9, -21, -23, -5, 6, 6, 9, -6, 12, -18, -43, -15, -38, -3, 7, 10, 15, -45, -7, 13, -10, -18, -4, -36, -4, -14, 0, 3, -3, -16, -36, -1, -5, 20, -2, 2, -1, -9, -6, -56, 9, -23, -7, 4, -4, 3, 2, -13, -5, -1, -3, 6, 6, 7, 24, 7, 10, -28, -11, -31, -23, -22, -37, -13, 16, -26, 8, 3, 1, -3, 9, -13, 25, -20, -29, 4, -10, -24, 15, 13, 22, -28, 3, 24, -7, -41, -50, -21, -10, -24, -46, -17, 3, 7, -21, 3, 0, 8, -3, 12, 0, 18, 0, 1, 16, -16, 10, 25, 9, -8, 7, -4, -2, 8, -8, 8, 2, -2, 19, -5, 6, 11, -31, -26, -20, -12, -18, -9, 35, 3, -26, 8, 8, -11, 2, 6, 18, -57, -18, 2, 5, -20, 16, 25, 36, -14, -26, 26, -2, -11, -16, -8, -46, -21, -32, -6, -5, 0, -16, 8, 2, 1, -15, -10, -6, 23, 5, -38, 19, -10, 1, 22, -27, -13, 2, 3, -13, 5, -9, -6, 3, -31, 15, -8, 15, -10, -31, -1, -17, -13, -17, -13, 24, 11, -37, -8, 1, 5, -8, 8, 20, -71, -13, 3, 0, -3, 11, 4, 19, -30, -50, 17, 2, 6, -18, -9, -21, -17, -66, -24, 5, 3, 9, 5, -3, 15, -7, 5, -15, 15, 3, 5, 16, -17, -5, 24, -17, -8, 2, 9, -19, 0, -2, -13, -4, -32, 20, -11, 16, 14, -33, 1, -1, -20, 1, -14, 17, 13, -56, -1, 13, 3, -5, 13, 27, -98, -10, 7, -2, -27, 13, -11, 22, -6, -16, 20, -17, -1, -30, -29, -39, -18, -62, -13, 3, -7, -5, -8, -2, 8, -12, 1, -43, 29, -1, -7, 18, -32, 2, 29, 2, -5, 7, -8, 7, 3, -9, -15, 5, -23, 16, -2, 13, 5, -49, -21, -13, -27, -24, -9, 22, 7, -34, -5, 0, 3, 13, 1, 11, -71, -9, -2, 1, 4, 13, -11, 18, -10, -10, 15, 7, -6, -13, 0, -7, -13, -34, -42, -5, 6, -16, 7, 9, 12, 1, -13, -28, 26, -3, 3, 17, -8, 6, 13, 21, -17, -1, 1, -14, 6, -8, -1, 3, -32, 11, -5, 1, -3, -36, -28, -19, -13, -37, -8, 7, 9, -7, 5, -12, 9, -1, 2, 15, -64, -16, -4, 3, -23, -13, 0, 17, -5, -68, -1, 0, -9, -11, -6, -39, -12, -58, -22, -1, 4, -33, 0, 4, 9, -2, 0, -8, 8, 6, -8, 13, -16, -5, 3, -13, -12, -3, -3, -3, 4, -21, 17, -3, -5, -8, -8, 1, -7, -26, 4, -29, 6, 3, -27, 16, 9, -40, -1, 2, 8, -1, 3, 3, -84, -8, -20, -11, -14, 2, -28, 21, -13, -50, 16, 4, -16, 2, 1, -12, -10, -26, -26, -3, -13, 13, -8, -14, 10, 0, -9, -4, -2, -5, -1, -4, -7, 0, -1, 14, 
  14, -13, -5, 2, 2, 14, 6, -5, -3, -7, -4, -53, 15, 26, 12, 11, 4, 2, 4, 9, -20, 7, -5, 7, 4, -4, 10, -6, -14, -10, 5, -13, -4, 9, -3, -8, 4, -18, -3, 0, 17, 0, -26, 7, 9, 31, -5, -1, 6, -19, -14, -37, 4, 2, -10, 7, -6, 9, -26, -13, 14, -7, -5, 34, 7, 4, -21, -15, -8, 9, -1, -7, -13, 4, -1, -23, -8, 13, 20, 20, 19, 4, 11, 13, 15, -2, -14, 8, 1, 4, 13, 4, -11, -3, -12, -10, -15, 9, 1, 1, 12, -24, -4, -2, 20, -4, -1, 3, 4, 13, 4, 9, -16, -15, -11, -5, 14, -2, 5, -6, -6, 5, -24, 5, -6, 14, -5, -20, 6, -3, -15, -6, -14, 9, -2, -9, -5, -4, 6, -32, 23, 15, 15, 22, -16, 9, 16, -16, -9, 8, -4, 10, 2, -10, 5, 13, -28, -11, -9, -11, -11, 7, -14, -5, 17, -36, 1, -6, 15, -12, -18, 19, 7, 9, 18, 0, 1, -2, -16, -7, 7, -5, 3, 4, -18, 6, -12, -1, -13, -3, -6, -28, 22, -12, -19, 6, -4, 9, 1, -11, -38, -9, 10, -17, 1, 13, 21, 35, 4, 13, 27, -1, -7, 35, 1, 2, -8, -15, 4, 10, -33, 1, -7, -14, -1, 19, 16, -13, 12, -33, -5, -5, 16, 3, -6, 12, 8, 15, 11, 6, -14, -27, -30, -6, 6, 18, 5, -9, -26, -11, -11, 0, -10, 5, -4, -42, 14, 0, 7, 16, -4, 19, 3, -11, -20, 4, 15, -7, -14, 24, 14, 21, 4, 4, 21, -3, -3, 18, -9, 5, -11, -10, 14, 4, -14, -15, 3, -13, 11, 10, 29, -21, 14, -36, 15, 4, 26, -2, -7, 15, 11, 11, 13, 0, -8, -14, -12, -2, 4, -12, -7, -17, -33, -2, -14, -3, 3, -2, -24, -12, 9, -4, 2, 3, -1, 13, 9, -20, -12, 14, 14, -9, 30, 23, 8, 24, 23, -2, 18, 6, -6, 31, -6, 15, -8, -14, 7, -3, -6, -4, -5, -17, -9, 11, 15, -2, 22, -25, -7, -1, 19, -6, -14, 12, 6, 8, 27, -1, -9, -9, -17, 0, 16, -18, 4, 4, -24, -2, -10, -9, -4, -3, -12, -8, 18, -2, 16, -1, -6, 3, -6, -13, -10, -7, 17, 4, -6, 11, 9, 17, 15, 6, 7, -8, -13, 22, -4, 15, -14, -3, 4, 4, 5, -2, -12, -8, -38, 18, -20, -5, -1, -43, -1, -9, 5, -8, -9, 13, 3, 13, 22, 1, 1, -9, -25, 3, 4, -2, 7, -12, -1, -9, -14, -3, -6, -16, -2, -60, 9, 0, -4, 10, -14, 3, 0, -13, -23, -10, -3, -5, -4, 22, -1, 16, -10, 1, 5, -7, -1, 24, -1, -9, 7, 5, 3, -17, -3, 11, -10, -10, 16, 3, -19, 0, 3, -8, 11, -1, 12, -8, -19, 1, 4, 2, -7, -10, -6, -23, -8, -6, -1, -9, 2, -5, 2, -2, -10, -9, 5, -7, 7, -37, 
  1, -13, 0, 0, 19, -18, 15, -5, 2, 0, -8, 22, -36, 11, -21, -7, -2, -18, -11, -15, 4, 1, -1, -30, -4, -14, -6, -13, 14, 25, -22, 15, -13, -14, 1, 4, 5, -55, 5, -7, -19, -8, 2, -7, -1, -4, -6, 2, -2, 8, -8, -7, -18, -10, 2, 5, 5, -4, -3, 4, 8, 0, -9, 5, 10, -7, 13, 1, 15, -19, 2, -21, -8, 0, -3, 20, -8, -8, -39, -9, -6, -7, -9, -10, 31, 11, -9, -16, -8, -4, 13, -23, -37, 15, -7, 11, -25, -14, -17, -2, 1, -19, -19, -13, -27, -12, 2, -35, 4, -21, 21, -3, -5, 15, -12, 14, -3, 10, -3, 2, 12, 1, 4, 2, 13, -6, -13, -55, 11, 4, -8, 17, 20, -11, -18, -8, 4, -21, -14, 10, -41, -14, -15, -22, 8, -19, -17, -2, 20, 7, -1, -21, -23, 1, 16, -20, -93, 12, -22, 18, 6, -16, -31, -6, -17, -40, -25, -13, -8, -37, 0, -20, -22, -14, -8, 8, -21, 6, -3, 8, -8, -1, -5, -3, 6, -5, 3, 1, 20, -8, -16, 6, 7, 0, -1, -27, 11, -15, -21, 8, -4, -1, -18, 21, -2, -13, -17, -14, -6, 4, -23, -9, 15, -9, 1, -19, 18, -1, 29, -21, -13, 3, -32, 19, 8, -12, -16, -10, -1, 9, -11, -9, -16, -29, 16, -16, -28, -20, -25, 6, 5, 17, 1, 5, -20, 7, -14, 1, 9, -6, 4, 3, 12, 3, -11, -16, 12, -6, -15, -7, 10, -31, 0, 1, -3, -8, -7, 16, -30, -3, -36, 3, -11, -20, -17, -5, 11, 10, -12, -20, -1, -10, 18, -11, -62, 10, -9, 21, -8, -25, -21, -10, -48, -8, -10, 8, -19, -18, -1, -34, -10, -29, 3, 5, 14, 15, -4, 6, -11, 4, -4, 3, 1, 3, -9, -2, 12, -5, -7, -41, 12, -10, -15, -18, 14, -34, -4, -1, -8, 8, -9, 5, -24, 8, -26, -10, -3, -5, -20, -35, 13, 5, -15, -15, -12, -15, 9, 5, -50, 12, -23, 14, -26, -13, -24, -13, -16, -20, -25, -4, -9, -7, -8, -23, -19, -30, 1, -6, 4, 9, -11, -4, -15, -14, 11, -19, 13, -1, -6, -8, 17, -2, -31, 22, 6, -6, 11, 14, 18, -25, -26, 4, -4, -1, -8, 2, -6, 1, -21, -1, -3, -19, -23, -30, 5, 2, -4, -33, 2, -5, 20, -5, -9, 19, -21, 30, 0, -11, 6, -49, 11, 1, -7, 8, -1, -25, -6, -35, -7, -20, -1, -5, 5, 1, -1, 20, -5, 5, -34, -16, 0, -3, -7, -4, 6, -6, -31, 14, 7, 1, 6, -7, 16, -9, 9, 7, 7, 8, -7, 3, -39, -2, 8, -13, -25, -2, -3, 12, 2, 2, -7, -10, -40, -2, 1, -10, -33, 5, -10, 22, -2, -1, -36, -29, 13, 0, -35, -12, 4, -25, -5, -34, -8, -10, -7, 6, 0, 1, 1, 5, -24, 13, -12, 0, 13, -10, -2, -22, 7, 9, -30, 12, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 6,512 } };
const TfArray<1, float> quant7_scale = { 1, { 0.013123481534421444, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[64] = { 274, -962, -1847, -2529, -2346, -675, -2069, 188, -560, -1216, 75, -1642, -1548, -621, -1161, -1596, -1981, -1183, -849, -2289, -1032, -1635, -1911, -574, -1421, -1434, -742, -1203, -76, -1211, 796, -1728, -1566, -1165, -2428, -2810, -803, -612, -1334, -872, -838, 34, -252, -1109, -728, -901, -1610, -1554, -2159, -1037, -296, -1, -1596, -1510, -1280, -1109, -1691, -1110, -287, -1875, -1861, -1894, -1143, -1156, };
const TfArray<1, int> tensor_dimension8 = { 1, { 64 } };
const TfArray<64, float> quant8_scale = { 64, { 0.00049126072553917766, 0.0001711755758151412, 0.0001997888321056962, 0.00020785463857464492, 0.00033834832720458508, 0.0005137505941092968, 0.00018228779663331807, 0.00032506944262422621, 0.00059902825159952044, 0.00043772050412371755, 0.00049451342783868313, 0.00043680763337761164, 0.00030655268346890807, 0.00047260851715691388, 0.00042338584898971021, 0.00038712739478796721, 0.00024683991796337068, 0.00045467691961675882, 0.00046830251812934875, 0.00048591301310807467, 0.00046617718180641532, 0.00043190075666643679, 0.00013939036580268294, 0.0005058891256339848, 0.00018227814871352166, 0.00013548148854169995, 0.00045325950486585498, 0.00043825490865856409, 0.00050219433614984155, 0.00047769557568244636, 0.00044865522067993879, 0.00050451478455215693, 0.00031013874104246497, 0.00040700705721974373, 0.00025748435291461647, 0.00040569485281594098, 0.00053654616931453347, 0.00041104262345470488, 0.00050056679174304008, 0.000498363864608109, 0.00067933555692434311, 0.00058062066091224551, 0.00054802576778456569, 0.00040242500836029649, 0.00057253061095252633, 0.00040207148413173854, 0.00044957955833524466, 7.6832344348076731e-05, 0.00017198140267282724, 0.00047005928354337811, 0.00027784414123743773, 0.00044678777339868248, 0.00038071320159360766, 0.00016914401203393936, 0.00017055864736903459, 0.00051869300659745932, 0.00058303750120103359, 8.9575434685684741e-05, 0.00048251569387502968, 0.00053699506679549813, 0.00044263855670578778, 9.90764528978616e-05, 0.00074919074540957808, 0.00035871227737516165, } };
const TfArray<64, int> quant8_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[64*1*3*32] = { 
  /* [0][0][][] */ -97,13,-8,-87,18,-46,-26,-15,-22,-127,-12,6,-49,-37,-4,-9,-27,-50,-79,-7,41,-20,18,11,-33,19,24,0,4,52,1,32, -54,-66,1,-39,-22,-14,-29,27,42,-12,18,25,17,-5,-7,-55,-22,-38,26,-36,38,-22,-1,-49,-16,15,33,-18,20,14,-19,13, -22,76,-9,-52,27,-11,-34,-7,45,15,20,12,-27,11,-52,-78,-10,2,-33,17,25,19,7,21,15,16,23,-56,-35,-62,27,-28, 
  /* [1][0][][] */ -83,-8,-35,-19,36,-59,-30,-106,-14,-27,-17,-45,-83,20,-59,-23,-84,1,-20,-55,12,-54,-47,25,25,5,-61,-42,-51,-45,-57,-12, -55,14,-27,-17,-63,-31,-127,-93,-11,-70,-43,-46,-57,-3,-11,13,-39,-34,15,-18,-54,-6,-59,-76,-12,19,-14,-27,-10,-60,-7,-54, -103,-10,-88,-32,4,-118,-97,-47,-24,-79,-50,26,-9,-32,12,-27,-48,-19,-32,14,-6,-70,-9,13,-80,7,55,-44,-48,-68,10,-33, 
  /* [2][0][][] */ -62,-47,-61,-60,-40,-53,-31,-121,-15,-39,-47,-45,-30,-68,-34,-4,-39,-99,1,-91,-48,15,-85,27,-56,-52,-27,-69,-37,-76,-25,-87, -87,-34,-70,-103,-127,-7,24,-2,-12,12,-67,8,-75,-110,-53,3,-47,-73,-14,-80,-84,-75,-36,-45,51,-58,-50,-28,-115,-12,8,-26, 8,5,-34,-14,-123,-28,-73,-63,-44,-3,-59,-37,-45,-73,-89,-48,-57,-54,-16,40,-21,-81,-15,-11,-32,-39,-44,-50,-52,-42,-55,-23, 
  /* [3][0][][] */ -70,-79,-74,-47,-79,-31,-2,-31,-11,-97,-64,-81,-48,-51,-56,-47,-93,-38,-5,-40,-1,-119,-33,-89,-28,-20,7,-46,-81,-43,-37,-34, -31,-74,9,-40,-31,-58,-43,34,21,-42,20,-70,-85,-43,-18,-23,-49,-72,-14,-2,25,28,-43,17,55,-33,-9,-21,-57,-65,-24,-37, -59,-5,69,-58,-72,-66,13,22,-31,-54,-119,-22,-54,-58,-89,33,7,-74,-49,-77,-54,1,-28,-28,-15,-51,-18,-29,-117,-54,3,-127, 
  /* [4][0][][] */ -8,41,-98,-99,-64,-83,-93,-32,42,-8,31,-41,-52,-67,12,44,-69,35,-25,9,-47,66,-56,-15,-33,-32,-51,32,18,23,-3,8, -126,0,-34,-26,-56,-30,1,-62,44,-43,48,20,39,-115,2,9,-105,10,-18,23,11,70,-94,-23,-46,-31,-6,-14,47,55,-26,21, -52,-28,21,-33,45,-18,31,20,37,-4,44,29,-127,-54,12,-21,-24,48,-15,32,19,18,-34,-65,-23,-41,52,-50,13,-67,-68,20, 
  /* [5][0][][] */ 20,-43,-2,32,25,22,-34,26,22,-3,13,16,31,16,-1,-38,-23,-7,44,-13,-2,-14,0,-81,-8,21,21,-24,-55,-10,43,-26, -42,-47,12,-54,13,-38,-8,-20,-5,-21,13,5,2,-9,-18,-71,-54,0,1,11,0,30,4,-55,29,18,9,-95,-42,14,22,-28, -56,-45,8,-38,35,-4,2,5,-6,-127,-44,-50,30,41,-6,52,-48,58,-4,-55,39,-24,-12,-38,-23,-4,8,-14,-14,-19,-25,-7, 
  /* [6][0][][] */ -46,-110,-13,-74,-36,-82,4,-78,-61,-25,-17,-58,2,-97,-51,4,-74,-98,-88,28,-93,-98,-100,4,-43,10,1,-10,-64,6,-36,-20, -127,-50,-63,-41,-38,-87,13,-80,-96,5,6,-89,-30,-48,-32,4,-110,-64,-71,-46,-104,21,-75,-39,46,-10,-12,-30,-56,-30,-20,-62, -26,-31,-67,-57,-18,-44,-63,-110,-57,-48,-27,-45,-37,-89,-101,-71,-56,-111,-52,-55,-73,5,-76,-4,52,-18,25,-39,-97,-79,-1,-12, 
  /* [7][0][][] */ -71,-16,29,22,-24,-89,54,55,-61,47,28,24,-25,-24,55,-33,-68,-10,-112,18,49,53,47,-74,15,-83,15,35,-38,-49,50,33, -52,46,45,-1,-28,-67,23,32,-23,56,16,32,-55,24,34,-50,-36,-70,-123,-11,-33,-19,45,19,9,-64,32,-15,0,-62,25,13, -35,46,-2,-26,-39,21,54,30,-4,-1,37,43,-18,-25,42,-127,-22,-3,-44,35,35,-7,39,-17,-7,-76,50,-18,-82,-91,37,17, 
  /* [8][0][][] */ -57,-50,6,23,-63,-53,-29,24,-31,-42,-21,-15,40,5,38,-36,8,-22,-29,-19,-45,7,3,-10,19,-16,-33,-40,-29,-44,-35,18, 4,5,-2,-4,-12,-92,-7,-48,-91,-10,-13,-31,12,28,1,-102,13,-20,-22,12,-24,-42,19,-23,-5,-6,-14,-4,-38,-28,-47,-127, -3,-35,-8,-14,-48,-58,11,-31,-78,12,-12,-2,-37,-1,-53,-68,-3,-63,11,-71,-25,5,3,-23,-57,-36,-44,-40,25,-52,-3,-92, 
  /* [9][0][][] */ 7,50,-21,15,16,7,-54,-41,-24,31,-10,-11,-22,21,-75,-23,-8,13,-52,-37,29,-14,-17,37,-39,-20,-14,-42,29,-53,-55,-86, -32,-9,-32,-48,25,-62,-39,-61,-26,-52,-15,-127,-74,0,-18,-30,24,-21,-75,-11,2,-14,-24,57,-48,-4,-73,-66,9,-52,-104,-26, -22,-25,1,-41,-10,34,11,-45,-47,75,-18,-71,-27,-37,-2,-2,-6,58,28,39,-22,-32,-77,30,-67,-28,-59,-9,-1,22,-57,-42, 
  /* [10][0][][] */ -17,22,-4,-26,30,-19,21,-13,-6,2,5,-14,2,13,17,-127,9,-9,-85,24,-11,-4,43,-14,-47,36,16,39,-2,-11,2,30, -45,7,30,-6,-56,14,-15,-7,-36,-8,33,2,1,14,41,-51,-18,9,-45,0,27,-17,30,-6,9,-28,-53,-2,12,-44,21,19, -63,20,12,-15,14,14,29,6,18,-31,39,-21,-58,-16,44,-85,-9,-11,-83,4,18,27,51,-13,28,43,26,-24,8,-8,4,24, 
  /* [11][0][][] */ -113,5,-74,-25,-101,-34,27,16,63,-126,16,26,24,-57,31,53,-127,-30,5,-4,15,-25,-54,-62,-31,-18,13,28,27,19,-72,16, -53,-99,-17,-10,29,-19,2,15,29,6,5,10,-26,-51,3,10,9,39,43,-20,-3,0,-61,-48,11,-2,29,-48,44,-10,-15,-5, -1,-49,36,-11,38,-17,9,-5,-21,-21,7,21,-70,-8,11,-40,-31,22,-68,16,10,12,4,-24,-13,-33,9,-43,-30,-87,12,-13, 
  /* [12][0][][] */ -85,-16,-69,-82,-46,-46,-108,-77,-24,-102,-76,-66,-72,6,-74,-63,-16,-31,53,-77,-95,8,-42,-92,-67,-87,-95,-11,-79,-121,-127,-51, -66,-85,27,-14,-43,23,-56,-96,-53,-88,0,-20,-47,-50,45,-29,-120,-49,-62,-92,29,-32,-31,-42,-9,-6,-11,-15,-24,-31,-49,-88, -48,-37,43,46,-59,21,1,-91,-17,-113,-14,-40,-46,-56,-82,-65,-71,16,-37,3,67,-67,-84,-7,-11,-72,-29,-18,-1,-39,-15,-70, 
  /* [13][0][][] */ 9,42,-61,-37,-7,15,-5,17,-82,1,2,-24,-63,-35,-24,-56,-49,127,-60,-68,-25,-8,-77,54,-79,2,-46,17,-48,-52,66,-93, -19,-115,-57,-84,6,-6,4,-16,-26,-91,-31,-45,34,-23,-21,17,-48,3,-32,-56,0,-115,10,-58,-106,13,-19,18,23,36,7,-40, 22,-86,-57,-20,17,-27,-13,-3,45,-55,4,3,17,-19,10,-98,-27,-3,-45,-23,39,-87,20,18,19,54,-42,36,10,-71,-7,-98, 
  /* [14][0][][] */ 34,-9,-3,-13,36,-28,-23,-8,38,9,-45,24,33,-25,-65,-44,-18,10,54,8,-23,43,-58,-33,-12,-9,-44,-28,-11,-127,59,-2, 4,-17,34,-2,78,-3,-20,-30,-60,2,-42,-36,47,3,20,0,-37,-37,-11,-13,-7,18,0,-54,7,21,-1,-46,-76,0,66,-18, -117,-61,35,-74,61,14,4,-20,-20,-17,-12,-42,-28,16,-53,-63,-98,3,0,-23,32,33,45,-38,59,38,39,-21,-39,23,29,-36, 
  /* [15][0][][] */ 31,8,3,-17,48,-98,-39,-2,-14,35,30,-19,36,3,27,-91,-29,94,-61,-84,-21,0,30,59,-73,-18,51,22,-12,-54,7,-35, -87,-35,-64,-113,27,-3,-20,-56,7,-48,35,-86,11,-59,-58,-55,-95,33,-40,-127,61,-35,-16,-44,-88,-24,-4,-36,-9,-24,29,3, 20,43,-48,-37,47,-110,3,-24,26,-108,51,15,75,-2,-39,-91,19,18,-3,8,60,-66,16,-108,-2,50,-14,2,34,-14,1,-7, 
  /* [16][0][][] */ -27,16,11,-35,-87,-63,-13,-119,-88,-65,5,-6,-32,7,-57,-108,-17,-17,-87,-71,-54,-74,-77,-96,-29,-59,-30,-37,-5,-32,-26,-4, -38,-56,-54,-48,-95,-57,-121,-42,-2,-27,-127,-70,-60,-18,-70,-96,-114,0,-9,-25,-103,-17,5,-73,-74,19,-118,-32,-55,-17,-82,-121, -23,1,7,-58,-16,-76,-116,4,-54,-31,34,-51,-5,-6,108,-6,-7,-51,9,4,-72,-79,29,-43,-15,25,-59,-98,-81,-56,-35,-84, 
  /* [17][0][][] */ 19,7,-28,9,-28,-13,5,-48,-84,23,-104,0,19,-81,-81,-34,-18,-35,48,-25,-10,-69,-35,-93,-79,1,-49,1,25,-26,24,-56, -11,16,11,9,18,-27,49,-35,-27,28,-112,34,15,18,-24,-82,-18,-53,-33,7,-21,45,-13,-65,-40,-20,-46,14,-10,11,23,-11, -90,16,16,-65,36,-95,-1,-9,27,10,-31,-42,-78,39,-52,-12,-127,-2,46,-93,-40,53,13,-53,-59,50,21,-39,-106,35,-3,-65, 
  /* [18][0][][] */ 20,-20,2,-20,-25,16,11,-29,-7,-13,-69,-62,49,22,0,-49,-51,-40,36,10,18,-47,-32,22,22,-102,29,-13,-30,-37,52,-51, -104,-15,8,-59,-39,47,-44,-13,13,-84,-54,-47,11,-39,-31,5,-93,-57,-4,-3,54,-35,-27,38,62,9,21,-12,-63,-17,11,-23, -23,19,-57,-78,-37,-19,-12,-33,-21,6,-118,-7,-76,-127,-50,-69,-41,-43,-13,-23,14,-48,19,5,20,-3,-3,-41,-22,25,-48,10, 
  /* [19][0][][] */ -8,29,-11,-70,8,8,-52,-36,-78,-35,38,-115,-47,15,2,-42,18,-9,-23,12,-5,-18,-19,49,-17,-6,-71,-66,12,-78,-61,-13, 11,-21,6,-40,-3,-21,-38,-51,-25,15,14,-42,-11,-7,26,12,2,-2,12,43,-16,6,-33,14,-2,-33,28,-33,45,-10,1,-40, -124,-40,22,-23,-21,0,10,-40,6,32,-22,-21,14,4,-17,19,-127,27,72,50,37,-24,-68,-74,-35,-35,27,-81,-71,21,15,-65, 
  /* [20][0][][] */ -112,-38,-14,-47,-47,-11,0,-5,60,-70,1,38,46,-71,-14,37,-66,40,-8,-34,39,16,-87,-127,7,-44,30,-32,64,18,-48,7, -6,-56,-1,4,-9,-52,15,14,-17,2,-53,21,-54,7,21,-25,-13,50,2,-13,18,-4,-86,-39,-2,-21,12,-12,-4,-54,-18,-13, -10,45,34,-29,28,-48,26,-5,4,11,-38,-7,-50,16,12,-110,-29,60,36,-1,-10,41,9,-19,4,-21,-5,11,-60,-58,12,-27, 
  /* [21][0][][] */ -5,88,-31,-6,-84,8,4,-49,-105,-26,15,-69,-28,-52,-26,-126,-31,125,-56,-67,10,-47,-8,-7,26,37,-127,-16,18,-67,-25,-57, 19,-36,-35,24,-28,-5,-27,-79,9,-29,17,-40,-102,19,24,-83,-33,-24,-65,-44,-33,-78,-42,0,-7,0,-59,-6,-29,0,-23,20, 39,-27,-76,53,4,-32,3,-65,-3,16,41,-8,-55,-65,41,-81,-22,-116,-4,-88,1,-57,-14,-43,-42,-39,-126,37,-84,-46,-23,-4, 
  /* [22][0][][] */ -125,-72,-119,-69,-101,-14,-56,33,-27,-19,-23,-81,-90,24,-37,-66,-61,-32,-73,-79,-96,-36,-85,-41,-105,-6,-87,-75,-16,-46,-58,-47, -45,-16,-80,-81,-29,-12,-92,-18,23,-92,-41,-3,-73,-52,-34,-56,-32,-45,-77,9,-26,-26,-45,-75,2,-77,-91,-71,-51,-2,-113,-61, -3,-79,-4,-57,18,-63,-38,-51,-6,-32,-2,6,-54,-8,-42,-23,-23,-7,2,-2,-72,-62,-14,-33,-28,-70,4,7,50,-64,-127,-14, 
  /* [23][0][][] */ 3,-32,0,34,-5,-52,-15,-18,15,14,0,5,47,34,13,-41,-16,-13,16,-10,-34,19,-13,14,-36,1,36,-57,21,15,19,-41, -69,-79,-1,-5,39,-53,51,-25,-12,-16,-14,-49,-6,18,18,-1,-8,25,21,5,-45,39,-2,18,-24,17,0,-63,-17,8,14,-15, -60,-58,-36,-82,57,41,30,-4,-4,-124,-31,-54,-1,30,-20,23,-127,70,-22,3,13,6,37,-74,-73,-15,-5,-38,-44,-16,-7,19, 
  /* [24][0][][] */ -68,-71,-79,-22,-35,37,-47,-33,-30,-22,-31,-35,-52,-8,-36,-47,6,-76,22,-27,-16,-41,19,-102,-20,-36,-69,-22,-61,17,-30,23, -53,-22,-28,5,-13,-12,17,-58,-54,-39,-111,-27,-6,-21,-93,-21,-42,-67,-40,-77,-54,-44,-37,-111,-40,-74,-31,-1,-17,-107,-54,-76, -112,29,-33,-15,10,-6,-40,-40,-12,-55,-70,-24,13,-5,-17,2,-61,-18,-79,-4,13,7,-127,-22,-100,-40,-10,-36,-44,-33,-40,-103, 
  /* [25][0][][] */ -9,-9,-53,4,-72,-25,-9,-12,-44,-20,-31,-16,6,-45,-127,-62,-7,1,-75,-97,-27,-108,-48,-62,-89,-14,-76,-42,-75,-30,-56,-64, -15,21,-48,-64,-62,-75,-61,-27,-23,-39,-46,-7,-15,-3,-59,-86,-90,-24,-64,-60,-33,-25,-1,-35,-26,-99,-16,-39,-83,-47,-65,-28, 22,-26,-37,-18,45,-46,-26,-23,-22,5,-27,16,-59,-83,-117,-111,15,11,-32,-59,28,-7,-30,-46,1,-125,-5,-59,-81,-39,-49,-13, 
  /* [26][0][][] */ -127,16,18,-89,-18,-17,-2,-41,52,-44,-11,-2,41,-87,10,24,-92,37,-40,34,88,11,-63,-45,3,-11,3,-43,33,42,-27,-17, 5,14,-61,-9,-51,-34,-25,-50,28,18,-3,3,-106,-45,-32,-15,-24,-7,3,-8,35,12,-38,6,1,8,18,50,25,9,-69,-18, -2,-12,27,-75,64,-1,18,-26,8,13,-16,-9,-23,20,-30,-60,1,31,-21,-31,9,28,22,-8,13,6,43,3,0,-44,-29,-47, 
  /* [27][0][][] */ 19,24,13,15,18,-61,-8,-29,43,-7,-57,1,-36,-11,28,-69,12,-30,-71,-17,25,18,26,-51,4,-35,12,-13,-25,-59,0,-44, 17,-9,26,-42,-19,-24,-25,-36,45,-20,-24,-10,-20,8,1,-84,-21,4,-4,-58,-41,-22,-40,-24,-21,10,-11,-68,-18,-127,-33,11, -72,95,-58,-67,59,-58,-79,-26,-75,-60,-27,-15,28,17,-1,-5,-6,-29,-4,-62,-46,7,-27,81,-43,-12,-102,-70,29,-55,15,21, 
  /* [28][0][][] */ -56,-89,-102,-18,35,-5,-52,33,42,-46,4,-1,-37,17,2,-74,-13,15,15,-40,-69,49,25,-49,-5,-48,-8,-13,-31,-9,37,2, -35,4,-24,-60,-15,-11,-25,22,29,-78,15,-60,6,-5,-47,-106,-63,42,-22,-4,-66,-68,29,-6,-26,-11,-74,-40,-35,-51,1,1, 37,-22,21,-35,-10,-13,-41,8,0,-32,-62,-127,-32,-33,-33,-25,-33,52,-48,-61,-44,-26,-4,-33,-3,19,-21,-6,-68,-14,-18,-46, 
  /* [29][0][][] */ 26,-101,-27,10,22,-26,2,1,-24,-9,-67,-33,-2,-10,0,-118,16,-11,-4,-7,-33,-20,12,-25,-11,45,-34,-2,-55,-127,-15,-73, 10,12,-45,-4,-32,15,-25,-34,-43,3,10,-14,-27,14,-13,-13,12,1,-27,-25,47,33,-3,-51,44,14,-25,21,9,5,-12,30, -8,18,-31,-20,-48,29,-33,-30,51,-32,-31,-70,24,-50,14,29,-29,3,-6,8,-61,-54,-27,-61,0,-3,-81,45,-72,33,-37,19, 
  /* [30][0][][] */ -46,-10,32,-13,10,-3,-9,40,-24,1,27,-13,-15,45,10,-59,-24,-15,24,-43,-57,36,20,-28,-75,-50,-6,-69,-16,5,2,-25, -116,-7,26,-26,-79,-86,62,11,14,-54,29,1,-62,42,-13,-36,-21,-9,-36,-5,19,-7,34,-3,-20,28,-24,-82,-43,25,-23,-20, -77,-6,30,27,28,5,18,3,-36,-35,8,-6,-21,5,-27,66,-6,35,-127,-5,-60,-44,-56,-28,-79,-32,-27,-58,19,-22,-21,24, 
  /* [31][0][][] */ -16,38,-15,18,-32,-34,-4,-1,24,7,-59,25,-20,-57,-65,-16,-29,28,-35,17,26,11,-8,-38,-6,1,-26,17,-61,-7,-24,35, -31,13,-36,-62,-73,-29,-50,-27,28,-36,29,-17,-18,-41,12,9,-62,25,-50,-42,-79,1,-4,-40,-23,-9,-51,23,11,20,-35,22, -77,25,-5,-60,-127,-51,-32,-42,34,-19,38,13,-11,-39,27,1,-74,-16,-20,-36,13,52,-17,-78,-53,-42,22,2,30,40,-20,5, 
  /* [32][0][][] */ -74,21,-18,-48,-65,-39,7,66,-9,-79,-19,-109,22,-13,-49,-6,-58,-52,-13,-19,-65,-38,-101,-25,-103,-38,-46,-29,-17,-10,-20,-61, -97,-73,-31,-42,-13,-35,-79,-85,-35,-56,-2,-42,36,6,-41,37,-82,-35,53,25,0,-63,-51,-38,-39,-37,-12,-101,26,-43,-45,-45, -47,-11,-69,-50,-33,-59,-92,-5,-9,-68,-127,-26,-34,-26,-48,-8,-79,-57,-51,-4,-24,-46,-25,-64,-53,-6,6,-43,-36,-48,-12,-95, 
  /* [33][0][][] */ 10,-39,4,13,-50,-10,-36,-7,-63,-2,-47,-12,-22,-30,36,-44,15,1,-14,-3,46,-66,-7,-31,13,37,58,4,49,46,4,-52, -18,-4,15,-93,-16,-17,-80,3,17,-40,-53,15,-9,-42,-17,-101,-27,-4,-75,2,-24,-95,17,22,-53,-1,17,-31,-80,-21,-73,-12, -29,20,-24,-127,36,-16,-87,-42,61,-51,17,-7,8,-13,-12,-80,-35,-18,-48,-3,39,-15,6,54,-28,38,-51,-25,38,-37,11,24, 
  /* [34][0][][] */ -103,52,-30,-20,34,-27,-64,6,-81,-87,50,-75,-120,-104,17,26,-52,-10,-55,-52,-71,-35,-45,17,-12,14,-27,-24,20,-93,25,-28, -39,17,-70,-127,-41,-91,-52,33,-44,-63,-46,-37,-78,-55,-82,-57,-43,-44,-56,-62,-63,-5,-30,17,15,-14,-65,-41,35,-59,-17,-31, 9,23,-3,-96,-41,-47,-62,-95,-27,21,-71,-41,-88,-54,-109,-80,-48,-17,-60,-65,-41,-14,-6,5,-81,-14,-4,-39,-51,-65,-39,-21, 
  /* [35][0][][] */ -30,79,5,-85,-1,-11,-56,-31,-28,-48,14,-29,-36,30,-33,-60,-7,7,-14,-34,32,-46,4,15,-29,-15,-76,-88,31,-29,-87,-24, -32,22,-4,-52,-17,-33,-62,-127,-40,23,66,-73,-30,27,57,-103,31,-37,-7,36,-18,2,3,22,-12,24,-84,-58,40,-83,-58,-6, -36,7,28,13,-20,-28,-22,-91,-15,101,-41,-23,1,-38,-18,46,-27,42,69,21,-43,-27,-83,-54,-75,-26,-13,-40,-4,1,-27,-53, 
  /* [36][0][][] */ 14,-8,-78,-3,20,23,10,-35,-57,-15,-30,8,-14,-52,0,-74,-24,-22,-87,-19,13,9,-23,12,-30,-54,-32,32,-16,-127,-14,1, 27,-1,-15,-16,37,17,15,-47,-16,1,-32,-11,-9,-24,-24,-114,-36,-8,57,11,-22,-5,-59,20,-21,-56,-28,31,-20,-33,6,7, -22,-91,-12,-9,11,-21,11,-18,-43,-17,12,-40,48,-37,23,-40,-24,28,-6,16,-14,-59,24,-29,8,39,-80,-17,-77,-28,41,-38, 
  /* [37][0][][] */ -47,25,-20,-38,39,-45,-21,-43,31,-17,111,-16,-90,17,-49,-9,-53,4,-6,-66,7,17,-26,0,25,-17,3,-5,-54,-7,-14,-54, -48,-10,-3,-17,-12,-29,-11,5,-36,-14,9,-82,-87,-12,24,-12,-58,-26,-34,-29,-19,-35,-87,-34,-64,-29,0,-92,-55,-112,-43,-61, -30,-2,21,-43,-16,-92,34,-58,-77,-40,0,-3,-30,-14,6,-88,-24,-6,-54,-127,-23,5,-23,7,-28,-30,12,36,9,16,-50,-54, 
  /* [38][0][][] */ 24,35,-34,36,-2,-112,-40,-18,17,9,-33,-2,-34,-31,-12,-67,-1,24,-42,-46,-7,21,12,-29,-8,9,-83,-67,-40,-86,1,1, -16,11,-16,-32,0,-127,-50,-93,38,1,-48,-56,-36,13,23,-9,-11,12,-86,-25,-21,-28,-75,21,15,-36,-54,-79,27,-41,-45,-42, -17,17,-22,-53,14,-23,4,-34,-6,13,35,-48,-3,1,27,-19,18,-9,-19,-13,-70,3,-32,45,9,-7,-43,-45,43,-12,-62,-38, 
  /* [39][0][][] */ 30,-2,22,-10,-89,-88,4,-4,-50,-20,21,-15,-74,-72,-20,-127,6,-13,-50,-12,-43,9,21,-47,-9,-95,-38,3,9,-120,-33,-68, 27,1,7,-28,-19,-70,32,-14,-109,17,47,-21,-15,11,2,-38,-31,-12,26,19,-70,2,-8,-8,9,-43,-6,-3,-20,-6,-47,-9, 16,-25,-20,-25,-8,-43,21,-9,-4,-5,-13,-22,-41,33,-8,-71,11,-55,83,-4,-30,27,9,-7,-45,-45,-57,-31,-22,45,-39,-70, 
  /* [40][0][][] */ 20,11,-8,-11,15,6,-15,-30,11,-19,-5,-25,17,-28,-7,-72,-4,13,28,18,-35,-12,-10,-3,32,-2,5,-10,-24,-64,5,-29, -5,-80,-9,-43,10,11,-2,-19,-15,-11,-17,-23,28,-10,18,-16,-56,-5,12,35,19,-21,-25,0,24,-89,-7,-9,-39,-19,33,-45, -111,5,15,-49,-4,28,-3,-6,-32,-127,-110,-38,12,-11,-41,-14,-62,-31,5,-34,59,-27,3,-8,51,18,14,0,-53,-1,-91,-13, 
  /* [41][0][][] */ -108,-6,-39,-59,-80,24,26,-13,-9,-124,-15,-30,-30,11,-5,27,-104,-68,15,3,-56,-49,-103,-71,-3,-15,-13,-41,-27,5,-28,0, -97,35,-46,45,-52,10,0,2,-15,-57,-52,-29,-39,1,-7,9,-39,-26,-32,6,-13,22,1,-20,24,20,-4,-28,-24,-10,-25,-3, -13,54,-24,41,-29,-3,-35,3,12,-16,-24,-34,37,-40,33,-5,-1,-127,-62,-10,-15,-23,-20,-31,14,23,-60,-90,0,31,-14,-2, 
  /* [42][0][][] */ 0,37,-2,-27,-3,-7,-8,18,-28,1,4,23,-88,-12,-30,-46,-11,-30,2,38,12,14,-108,-16,-24,-2,-27,43,5,-73,-26,-11, -47,13,-38,-59,-55,23,-44,-21,-27,-52,-34,-46,-27,-47,-65,-4,-36,-67,16,-70,5,-25,-42,-51,12,-84,-45,29,-41,-5,-26,-6, -68,-10,-51,5,-56,33,-26,-7,-67,5,-62,-7,-16,-2,-127,-14,-81,-82,33,-9,-54,-28,-34,-26,8,-46,17,-53,-74,9,-24,-43, 
  /* [43][0][][] */ -57,-32,-21,7,18,71,-18,-43,11,-127,-69,-64,70,-57,11,-11,-36,19,21,-23,34,-18,11,23,57,35,18,-57,-7,4,-2,24, -110,-26,-60,-72,30,33,-63,-44,-11,-86,-31,-89,-15,-23,-36,-6,-71,-10,1,-14,-1,35,9,0,27,9,14,-17,-59,11,53,-3, -75,-18,-43,-31,36,-11,-56,-19,45,-76,-13,-23,52,-48,-16,-41,-23,-53,-10,-69,-22,-50,12,7,32,76,-43,-57,-48,7,9,23, 
  /* [44][0][][] */ -61,0,9,-7,49,37,3,-5,-39,-13,-34,-22,-15,-7,-10,14,-51,-55,14,-56,-7,-4,18,-23,7,21,20,-27,-1,7,-12,18, -127,-17,-40,14,2,2,-19,-11,-20,-34,-52,-16,18,23,8,-25,-18,-30,29,-39,6,-23,-13,-34,9,15,-15,-54,-42,-2,-13,4, -13,-38,-2,33,-1,2,-19,-1,-5,-11,-27,-17,25,13,-4,9,31,27,2,-22,9,8,0,2,16,18,-18,19,-20,31,-22,18, 
  /* [45][0][][] */ -26,-21,-42,23,76,65,-127,-29,-20,-67,-49,-20,-3,-12,-20,7,-17,15,24,-79,23,22,-49,42,56,-9,42,-26,-20,22,-13,13, -97,-7,-27,-83,23,-104,-63,-43,5,-97,-34,-96,-27,-22,-6,-7,-28,-49,-9,-69,6,-17,-2,-31,30,44,1,-82,-37,12,15,23, -33,-77,-35,29,52,-66,-58,-66,39,-44,-6,-45,67,-34,2,-80,-13,-9,-20,-16,-51,-36,39,7,-15,44,-6,-14,3,14,-25,-18, 
  /* [46][0][][] */ -16,-16,-55,-19,-5,-19,3,-97,-79,-33,-15,-59,-40,-64,-1,-76,-5,64,-50,-81,-23,-29,-25,1,5,46,-49,-53,-13,25,-97,-4, 18,-82,-36,2,-21,-42,-25,-127,0,13,28,-19,-30,-12,48,-71,14,-70,-38,-87,35,-60,-38,-38,-10,-13,-121,-49,-25,40,-8,-6, 35,-62,-90,46,-66,-44,-23,-86,-7,4,42,13,-49,-73,55,-32,12,-35,-48,-104,7,3,-68,-50,-60,-31,-74,3,-55,-19,-16,-61, 
  /* [47][0][][] */ -61,-73,-30,-46,-8,-23,-43,-70,7,-52,-37,-57,-110,17,47,-60,6,-109,-11,6,-83,25,17,-62,11,-76,-67,8,-55,0,-82,-38, -111,-8,15,-19,66,-34,-33,-99,-71,-17,-62,-77,-9,-15,-1,-110,-30,-99,-97,-27,-43,-59,2,-35,-54,-83,-87,25,-81,-80,23,-57, -108,-127,-58,-22,-111,20,-57,16,-87,17,-66,-86,-96,-60,-19,24,-67,9,3,-35,27,63,-23,-16,-39,22,-31,-84,9,-28,26,18, 
  /* [48][0][][] */ -31,37,-44,-74,-17,-27,-37,-22,-28,-102,17,-84,-17,-44,-53,-91,-72,-2,-8,-11,22,-18,-57,-60,-58,-1,-127,25,-8,-58,-33,-16, -106,5,17,-55,-13,20,-62,-24,-59,-37,-38,-36,-37,3,-19,-57,-97,-71,-22,-20,35,-13,-59,-73,-42,-71,-53,-53,8,-48,-45,-81, -88,23,-56,-5,-20,-45,-57,-21,-47,-44,-64,-17,-10,-10,-80,-23,-72,-11,26,-31,-11,14,0,-110,4,-86,-52,-57,-54,-82,-77,-40, 
  /* [49][0][][] */ 14,48,-32,-6,8,14,-42,0,-18,-24,-16,26,-18,-40,-38,-12,9,-8,19,-7,-1,-13,11,-42,36,-26,-64,28,-9,-31,-8,26, -54,25,-61,-106,-85,23,-42,-50,-2,-57,-73,8,-29,-65,2,-6,-127,-48,11,-45,-75,-27,-46,-22,10,-59,-63,18,5,23,-24,15, -121,-15,2,-30,-69,-6,-32,-12,50,-95,16,-4,2,-2,36,20,-80,-77,-3,-12,-60,27,-30,-41,32,4,-30,-43,1,16,18,10, 
  /* [50][0][][] */ -46,33,71,36,-33,-31,3,74,-81,15,3,51,-21,30,87,-101,-35,-20,-67,43,-17,24,39,-25,15,-86,-21,-17,-44,-127,33,24, -74,6,-24,-20,-9,-44,51,71,-26,6,79,17,-67,2,-25,-86,-10,-13,-103,33,18,-5,29,-12,-8,-39,41,-17,-33,-51,13,28, -61,11,70,29,-72,-6,27,32,-127,39,-64,59,-39,72,43,-109,-2,-56,-67,45,-50,-25,31,19,-13,-93,-22,20,-18,-82,-4,33, 
  /* [51][0][][] */ -52,28,21,-31,-31,-69,-45,-36,41,-86,48,-51,-68,45,-15,-9,-120,-20,0,-63,-6,24,9,-45,-68,6,-7,-114,-11,30,2,13, -127,-10,-100,-14,3,-37,5,-27,17,-76,17,-21,-30,-21,13,15,-4,66,-68,16,31,20,1,-74,-25,1,-15,-60,83,-3,-30,-5, -16,-34,-6,-9,-22,34,33,-60,-9,22,-55,-5,-26,0,15,33,-14,35,-55,-34,-14,-17,2,-25,-27,-47,-19,-21,16,-40,-51,7, 
  /* [52][0][][] */ -45,-62,6,11,20,-34,-41,-21,6,11,-17,23,31,49,21,-47,17,27,59,22,-3,26,-55,-19,-17,-17,43,-77,1,31,25,-73, -127,-19,-4,-12,-26,-41,7,-68,29,-25,-34,-34,-26,49,-60,74,-123,-8,-12,-31,-7,37,13,-69,-31,-106,3,-92,-19,-27,-1,-40, -4,14,-79,58,33,43,44,-28,-24,-1,-51,-33,-13,-12,-8,-5,-74,-33,-12,-32,-21,-68,-56,-45,-31,-106,-34,15,4,-9,-44,38, 
  /* [53][0][][] */ -21,-8,-56,-109,-14,-101,-62,-119,-76,13,-61,-116,-31,-50,13,-118,-6,-15,-27,-71,-21,18,-40,-69,24,-25,-59,-127,-63,-8,-3,-88, 1,-86,-102,-85,-62,-11,-8,37,-103,-47,22,-124,-4,6,-38,-48,-74,-29,-63,-100,-81,-36,-90,-41,-62,-90,-14,-61,-36,-106,-83,-53, 6,-73,-38,-91,26,62,52,-83,-109,-32,-83,-44,-105,-96,-54,-49,-21,-4,-21,-113,-9,-63,-9,-62,-14,-34,-81,-55,-70,-45,-50,-54, 
  /* [54][0][][] */ -41,-63,-127,38,-62,-55,-71,-58,-39,-61,-11,-37,-43,-61,-107,-19,-12,-27,-86,-36,18,-67,-53,-2,22,-23,-27,-5,-55,-47,14,-57, -112,-44,-58,-24,-15,10,-76,-7,29,-42,13,-21,-70,-113,-11,-65,-30,-8,-8,11,-32,-117,-12,-16,-10,-30,-36,-85,3,-10,16,-62, -24,-1,4,0,8,-37,32,-18,-39,-59,-19,-25,-45,-94,18,19,-84,-25,-15,15,-3,-120,11,-65,-72,-16,-94,-45,-8,-34,-84,-33, 
  /* [55][0][][] */ -63,-19,-6,29,-32,5,0,11,-2,-59,-18,-46,12,-12,23,19,13,-99,-106,19,-30,14,-40,-2,30,1,-71,-72,14,6,-56,21, -8,-4,-7,22,-8,10,-22,-9,33,1,-11,-48,20,1,50,-85,13,-30,-20,7,-9,-13,-18,-11,10,-22,-53,-8,-12,-6,-2,-60, 17,-4,-18,-9,-27,-114,-3,-1,-60,-25,-10,-28,-13,35,28,-127,27,-2,-34,-3,-32,11,-25,-50,-22,-3,-10,-20,-36,-13,3,-52, 
  /* [56][0][][] */ -45,67,3,-38,10,-33,-30,-4,-13,-25,37,-38,-69,15,8,-34,7,-51,-32,16,-14,-18,-30,34,5,-12,-38,-23,3,-44,-40,-39, -1,11,0,-41,0,15,-32,-20,-59,15,-7,-26,-10,-8,-1,-15,24,-6,-1,8,14,1,-37,-27,6,15,4,12,37,-53,-2,-20, -86,-16,-4,-24,-34,20,-23,-46,20,30,-24,-13,39,-20,-22,39,-127,6,47,37,-35,-32,-67,-35,-6,-34,8,-16,11,9,-5,-21, 
  /* [57][0][][] */ 3,84,-59,-12,-1,13,-64,-27,-127,-71,-83,-74,-60,-34,-48,-6,-44,-62,-115,-30,-13,25,-96,-104,-88,-20,-100,-81,49,-94,-16,11, -22,-23,-96,15,-7,-50,-101,-74,-10,-5,-69,-51,-23,-58,10,-76,-35,-16,-56,-21,-114,-94,1,-17,45,12,-11,-43,15,-110,-29,-106, -70,-76,-10,-40,0,-37,-55,43,-118,-29,-22,-21,-35,37,36,-30,-20,-70,-37,-44,-40,-41,-38,-32,-65,-1,-22,-85,-22,-24,14,22, 
  /* [58][0][][] */ 5,18,-55,-49,-117,19,9,-16,-23,-38,-25,-2,-108,10,-26,-3,23,-60,-13,-40,-6,20,-6,-29,49,-15,-27,40,-42,-24,10,-15, -67,-7,-77,-54,-26,11,-65,-10,-25,-20,-20,30,-43,-26,-38,-16,-45,-87,32,-42,-93,-35,-1,-36,-20,-78,7,2,8,7,-64,-27, -127,18,-36,-6,-34,22,-76,-19,-26,-28,-58,-71,-57,42,-25,-13,-49,-81,57,13,-93,14,-45,-20,87,34,-5,25,-62,36,-47,10, 
  /* [59][0][][] */ -42,2,-7,12,-14,-45,-28,1,-48,2,12,-24,-15,7,0,-55,-17,14,31,-6,-72,15,-21,29,-26,-30,21,-33,16,41,33,-38, -10,-33,0,-28,4,-3,16,-37,-33,51,-6,-34,4,27,-13,-3,-12,0,-17,16,-38,9,-55,-11,8,-19,3,-41,13,-2,-43,-36, -127,-30,24,-30,27,-9,14,6,6,0,-2,7,3,17,7,52,-17,28,40,10,-14,30,4,-68,-13,-41,18,-57,-18,-1,9,-34, 
  /* [60][0][][] */ 13,37,-2,24,18,38,-14,-13,14,-4,-42,-6,11,-12,6,-11,4,4,-35,-11,25,19,30,-43,-29,12,-49,41,-75,-127,-47,-64, 5,43,-43,1,-52,-15,-31,-19,36,-28,-4,-8,-22,-31,-2,-8,7,2,-45,-4,17,1,-2,14,1,21,-68,28,23,-18,9,48, -104,28,6,-32,-105,-7,-46,19,80,-72,11,37,43,-75,36,23,-62,42,-54,-48,-25,16,-22,-69,1,3,-19,43,43,19,-10,14, 
  /* [61][0][][] */ -91,-69,-42,-91,-54,-11,-77,-26,-111,13,-86,25,21,-85,-80,-45,-45,-28,23,-61,-83,-100,-64,1,-71,-31,-65,20,-34,-27,-21,-43, -26,-59,-39,-37,-18,32,-98,-57,-60,-56,-79,-40,-34,-29,-56,-40,-60,11,-15,-30,-86,-91,-123,-97,-52,-124,-48,-108,-115,-39,-8,-95, -70,30,-32,-127,-58,13,-83,-107,-114,-69,-32,-98,-44,-57,-118,43,-47,-10,-37,-73,-25,-75,-77,21,-41,21,-24,-82,-110,-68,-98,-30, 
  /* [62][0][][] */ -26,8,5,1,4,-10,-2,-7,-22,-14,23,-22,-33,16,-38,-63,-9,6,32,5,-41,8,-11,22,-19,-12,-5,1,13,19,-5,-30, -11,-4,9,-8,-31,-19,13,10,-28,35,9,-19,0,2,40,-11,-9,-12,-21,23,-20,-9,-17,1,-29,-29,17,-41,40,-10,-26,-15, -127,-28,5,-43,29,-5,10,-11,-16,28,-36,-22,9,22,-9,29,-67,19,35,12,-5,19,-25,-64,-21,-29,12,-47,-79,-9,11,-37, 
  /* [63][0][][] */ -37,-24,-72,8,-11,-48,9,68,-38,46,30,-71,-70,23,35,-14,28,-38,-21,-29,-78,-38,83,-33,6,-17,-2,-92,45,-39,-22,-37, -13,-43,-49,-103,56,-50,-2,56,-54,-12,-115,-127,-117,50,27,-55,-20,31,-36,-72,-53,-15,-52,-84,74,-89,-101,-69,-74,-67,-55,-123, -62,-5,-59,-35,-72,-9,-83,-42,-57,-37,-55,-29,-28,-13,-23,4,-18,34,-21,-2,-39,103,-10,-37,31,-54,-17,8,-53,-120,-4,-101, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant9_scale = { 64, { 0.010236098431050777, 0.0035666804760694504, 0.004162877332419157, 0.0043309396132826805, 0.0070499563589692116, 0.0107047064229846, 0.003798218909651041, 0.0067732725292444229, 0.012481584213674068, 0.0091205136850476265, 0.010303872637450695, 0.00910149235278368, 0.0063874502666294575, 0.0098474537953734398, 0.0088218310847878456, 0.0080663356930017471, 0.0051432517357170582, 0.0094738239422440529, 0.0097577320411801338, 0.010124671272933483, 0.0097134476527571678, 0.0089992508292198181, 0.0029043916147202253, 0.010540901683270931, 0.0037980179768055677, 0.0028229446616023779, 0.0094442898407578468, 0.0091316485777497292, 0.010463914833962917, 0.0099534494802355766, 0.0093483533710241318, 0.010512265376746655, 0.0064621707424521446, 0.008480556309223175, 0.0053650434128940105, 0.0084532145410776138, 0.011179682798683643, 0.0085646426305174828, 0.010430003516376019, 0.01038410235196352, 0.014154898002743721, 0.012098035775125027, 0.011418876238167286, 0.0083850827068090439, 0.011929469183087349, 0.0083777168765664101, 0.0093676131218671799, 0.0016009083483368158, 0.0035834710579365492, 0.0097943367436528206, 0.0057892678305506706, 0.0093094427138566971, 0.0079326871782541275, 0.0035243500024080276, 0.0035538258962333202, 0.010807688347995281, 0.012148394249379635, 0.0018664284143596888, 0.01005388330668211, 0.011189036071300507, 0.0092229880392551422, 0.0020643952302634716, 0.015610427595674992, 0.0074742678552865982, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[32] = { 1032, -5481, -5060, -959, -7411, -6958, -2970, -3004, -10268, -1814, -1275, -863, -3917, -6574, -6470, -8449, -464, -7659, -10930, -4336, -5730, -8362, -2979, -5432, -7613, -7524, -2480, -2331, -4891, -8848, -4186, -6925, };
const TfArray<1, int> tensor_dimension10 = { 1, { 32 } };
const TfArray<32, float> quant10_scale = { 32, { 0.0004274378006812185, 0.00039601483149453998, 0.00023298608721233904, 0.00048906891606748104, 0.00023979481193237007, 0.00022369576618075371, 0.00031037055305205286, 0.00039847573498263955, 0.00022312271175906062, 0.00049887323984876275, 0.00059881334891542792, 0.00035867324913851917, 0.00027143207262270153, 0.00029021463706158102, 0.00024823681451380253, 0.00024606540682725608, 0.00050720991566777229, 0.00026784776127897203, 0.00021557489526458085, 0.0003579440526664257, 0.00027404521824792027, 0.00022060664196033031, 0.00038784230127930641, 0.00027228877297602594, 0.0001932821178343147, 0.0002090299385599792, 0.00042430908069945872, 0.00048050444456748664, 0.00034309446346014738, 0.00018692966841626912, 0.00035011125146411359, 0.0002297445316798985, } };
const TfArray<32, int> quant10_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[32*1*3*13] = { 
  /* [0][0][][] */ -127,-25,-34,34,5,-5,-2,-6,32,6,8,-19,-2, -107,-71,-44,1,28,-7,20,26,5,1,24,23,2, -75,-47,-1,-14,41,15,-6,18,-13,-27,11,-4,-3, 
  /* [1][0][][] */ -127,-83,39,47,14,-38,-22,2,22,3,-13,-26,4, 11,55,-41,2,-53,109,5,1,1,-7,3,-12,6, 50,-16,8,49,-42,11,3,14,18,-5,-49,-2,-2, 
  /* [2][0][][] */ -22,33,65,-3,118,14,70,40,-20,-91,-7,-56,36, 8,-33,50,-12,-125,-60,-127,-59,83,71,64,42,18, -6,-8,-63,-20,50,8,31,-34,-27,15,39,45,-14, 
  /* [3][0][][] */ -127,69,-24,-11,3,6,-2,-5,9,-28,22,10,5, 19,32,61,5,19,4,-2,14,-10,7,17,1,21, -102,28,31,58,43,-3,-22,-8,7,-21,5,-14,11, 
  /* [4][0][][] */ -73,-127,16,24,-49,3,37,5,-50,-4,56,-32,-3, 63,-123,76,110,-78,-38,-13,-21,-14,-38,20,-40,32, -15,23,20,79,-40,-93,-3,18,15,-11,-12,59,-45, 
  /* [5][0][][] */ -127,43,57,-44,-102,-6,59,6,-15,-48,-64,43,66, -64,18,52,-96,-113,-54,90,80,12,-36,-24,45,100, 42,51,27,5,-115,5,46,-17,-18,-10,-48,69,-32, 
  /* [6][0][][] */ -18,60,-35,-14,-18,35,55,18,-5,16,25,-6,-30, -127,-61,41,-104,-94,8,56,8,-47,-30,5,36,49, -57,31,32,50,-32,-37,-47,-17,34,-26,38,43,38, 
  /* [7][0][][] */ -60,127,-27,30,-21,-18,9,1,34,6,46,19,-6, 81,-89,2,12,48,-8,-9,0,-23,-44,-26,11,-9, -54,-23,-14,-15,-3,-32,18,-19,-23,-48,-12,-15,-3, 
  /* [8][0][][] */ 92,4,-12,73,-50,-70,48,79,-69,12,16,-27,-105, 59,52,-44,79,-71,-67,10,-22,-6,14,77,57,-74, -127,0,85,11,-25,42,-45,-12,-54,37,-5,64,-54, 
  /* [9][0][][] */ -110,37,-11,-48,8,21,17,-14,12,-23,-13,-7,1, -28,-127,5,39,-13,-9,-11,16,-7,21,-12,24,13, 45,60,-1,7,-6,-22,-39,-37,33,23,24,-27,-35, 
  /* [10][0][][] */ 127,-24,11,6,-4,-16,-14,21,-7,6,6,11,0, -15,-9,16,19,-8,6,-5,0,-1,-1,-12,3,-13, -102,-8,-6,-18,5,13,7,3,14,-12,4,-12,0, 
  /* [11][0][][] */ -85,78,-72,4,-27,27,41,24,13,16,9,-34,3, -102,72,65,-9,9,-48,-11,-7,-19,-2,17,22,-5, -73,-127,-84,-16,6,8,-14,6,17,8,5,6,5, 
  /* [12][0][][] */ -47,21,11,111,5,-52,-44,-30,-53,-24,9,-25,-13, -10,104,127,44,5,-64,-14,-68,-38,-68,48,-92,28, -50,94,34,26,17,-37,17,-78,-34,-37,42,-2,27, 
  /* [13][0][][] */ 31,-37,59,77,-48,-74,-82,29,63,34,-4,-24,-37, 127,-24,-4,24,45,-14,-3,38,90,37,-51,-65,-25, -79,-42,-60,-40,26,30,48,4,8,-29,10,38,-24, 
  /* [14][0][][] */ 25,27,-21,-47,-54,26,-77,-11,-73,-12,50,17,-57, -76,-17,-76,84,67,-38,-18,38,6,-76,-7,7,-35, -68,127,25,78,-39,14,-34,76,-21,70,68,35,-8, 
  /* [15][0][][] */ 57,45,-55,-9,-13,61,-7,-41,5,35,-11,-23,-21, 59,54,8,-61,-6,37,58,-67,-51,0,-3,17,-42, 52,127,27,-75,-62,37,59,18,-17,-21,-14,-18,-26, 
  /* [16][0][][] */ 18,-18,2,33,39,-35,-33,-19,-26,4,-28,24,-11, 6,-9,36,-6,34,-13,-37,-10,-3,-27,14,-8,-23, -127,-75,-19,12,22,21,4,-27,7,15,7,-13,18, 
  /* [17][0][][] */ -73,-127,-25,73,72,-57,42,19,-1,8,-39,74,-24, 31,-4,-47,20,21,45,-116,43,40,8,-84,-19,74, 44,62,-75,-30,26,99,-39,-36,-9,-4,11,-50,65, 
  /* [18][0][][] */ 0,-54,120,48,-33,-50,-111,-2,-3,-3,19,32,16, 50,89,48,31,-82,-127,-62,-6,75,30,1,2,-8, -29,92,-32,-48,-89,-8,47,66,23,-52,-35,-35,85, 
  /* [19][0][][] */ -127,2,6,-7,-67,16,-9,39,20,8,-38,-31,9, 72,-12,-31,83,62,-35,-39,4,37,-20,-59,-20,70, 6,51,-35,-51,37,-4,41,-39,-67,-20,72,29,1, 
  /* [20][0][][] */ -33,121,105,-7,-70,-81,28,-52,13,-1,90,-42,15, -74,31,44,-45,-80,41,31,-77,47,21,59,-7,36, -39,-34,-82,-86,127,28,-52,13,75,-4,-9,-40,66, 
  /* [21][0][][] */ 27,-85,77,-66,-39,55,-36,14,-4,-7,12,31,38, 85,66,-61,36,-38,-108,-57,4,10,127,40,-14,-57, -60,-104,-53,52,2,-6,44,74,16,22,-15,-62,-50, 
  /* [22][0][][] */ -15,2,-30,49,7,-24,-14,-4,-2,-1,27,8,30, 23,123,-55,27,23,-47,-22,12,-8,-48,-1,16,32, -50,-127,-6,16,7,-72,13,10,22,-5,-2,1,-6, 
  /* [23][0][][] */ 105,-60,59,36,9,36,-45,18,71,-18,-13,9,4, 102,-109,127,-63,21,20,-2,5,-4,-14,-15,33,35, -118,-88,54,-11,44,-20,36,-3,-16,36,26,38,17, 
  /* [24][0][][] */ -91,67,29,-68,-98,20,99,-51,-100,-91,14,107,29, -1,32,-69,-35,0,97,-17,-94,-94,91,127,-27,-76, 5,-66,-125,80,95,2,-114,-41,7,58,46,-93,-9, 
  /* [25][0][][] */ 64,47,-122,-68,89,60,-48,-36,67,60,-66,-45,16, -20,42,-57,45,42,-23,-113,6,37,-39,-94,51,8, -25,-57,-59,127,51,-110,-2,-27,86,-61,11,18,-7, 
  /* [26][0][][] */ 3,127,-1,36,-2,-31,-42,-12,19,9,3,-18,-6, -46,28,-17,-51,-6,9,31,12,10,-9,-10,-26,-9, -26,-70,-48,-33,22,48,50,28,1,11,16,10,13, 
  /* [27][0][][] */ -69,-25,15,30,-17,-12,-23,17,15,-35,21,14,-2, -127,-71,13,-26,24,25,22,5,-24,20,-5,-23,6, 1,63,-33,-71,-28,40,63,-1,-23,-19,-17,1,-10, 
  /* [28][0][][] */ 78,74,38,31,-57,66,-35,26,-34,-2,9,-36,-1, -28,-50,70,-46,-43,19,1,27,3,21,-43,1,-19, -127,-121,-27,73,16,-38,-25,-4,33,-5,12,28,-5, 
  /* [29][0][][] */ 68,32,-37,23,-106,55,-43,4,20,-42,38,-8,2, 80,34,-24,3,31,-40,-15,1,110,12,-36,-127,60, 76,91,-48,48,-5,-15,-4,21,-5,-4,-19,-34,24, 
  /* [30][0][][] */ -33,-123,-35,15,11,46,14,20,-13,16,5,27,-2, -24,127,30,18,79,14,-27,-1,-65,-24,-10,-2,-36, -38,44,-6,24,6,24,-17,-31,-1,-26,-3,13,-5, 
  /* [31][0][][] */ 48,44,-75,-58,-78,60,127,22,29,-29,-36,-43,23, 67,-119,20,-24,-3,-16,4,35,32,37,1,-54,-58, 92,-26,61,0,-30,-75,-74,4,-16,11,0,16,0, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 32,1,3,13 } };
const TfArray<32, float> quant11_scale = { 32, { 0.0081955939531326294, 0.0075930971652269363, 0.0044672214426100254, 0.0093772951513528824, 0.0045977705158293247, 0.0042890910990536213, 0.0059509733691811562, 0.0076402816921472549, 0.0042781033553183079, 0.0095652807503938675, 0.011481509543955326, 0.0068771182559430599, 0.005204375833272934, 0.005564508493989706, 0.0047596353106200695, 0.0047180014662444592, 0.0097251264378428459, 0.0051356512121856213, 0.0041333832778036594, 0.0068631367757916451, 0.0052544800564646721, 0.0042298608459532261, 0.0074363988824188709, 0.0052208020351827145, 0.0037059467285871506, 0.0040078917518258095, 0.0081356046721339226, 0.0092130815610289574, 0.0065784142352640629, 0.0035841462668031454, 0.0067129521630704403, 0.0044050686992704868, } };
const TfArray<32, int> quant11_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,31,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.052154585719108582, } };
const TfArray<1, int> quant12_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,31,32 } };
const TfArray<1, float> quant13_scale = { 1, { 0.047992967069149017, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,31,1,32 } };
const TfArray<1, float> quant14_scale = { 1, { 0.047992967069149017, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,16,1,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.047992967069149017, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,16,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.047992967069149017, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,16,64 } };
const TfArray<1, float> quant17_scale = { 1, { 0.061240654438734055, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,16,1,64 } };
const TfArray<1, float> quant18_scale = { 1, { 0.061240654438734055, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,8,1,64 } };
const TfArray<1, float> quant19_scale = { 1, { 0.061240654438734055, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,512 } };
const TfArray<1, float> quant20_scale = { 1, { 0.061240654438734055, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,6 } };
const TfArray<1, float> quant21_scale = { 1, { 0.28226625919342041, } };
const TfArray<1, int> quant21_zero = { 1, { 35 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,6 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension0, 403, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 1248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 403, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 992, (TfLiteIntArray*)&tensor_dimension13, 992, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 992, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 992, (TfLiteIntArray*)&tensor_dimension15, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1024, (TfLiteIntArray*)&tensor_dimension17, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1024, (TfLiteIntArray*)&tensor_dimension19, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension21, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
  if (i < 0) {
    tensor->data.data = nullptr;
    tensor->dims = nullptr;
    return;
  }

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus tflite_learn_102_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_102_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteStatus tflite_learn_102_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_102_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_102_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
