/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 07.08.2023 03:46:06

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 5232;
#else
constexpr int kTensorArenaSize = 4208;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,507 } };
const TfArray<1, float> quant0_scale = { 1, { 0.04968397319316864, } };
const TfArray<1, int> quant0_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 39, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 39, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 20, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 20, 1, 64, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 640, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[32*1*3*13] = { 
  /* [0][0][][] */ -78,78,124,35,18,-68,124,16,-75,-127,55,-9,11, -10,51,60,79,100,11,-27,52,10,-97,4,15,50, 57,-67,22,104,3,-57,-96,-50,-60,-16,-66,-15,-15, 
  /* [1][0][][] */ -9,18,-23,127,34,-50,-68,-23,13,11,39,8,64, -17,46,35,123,-74,-17,-96,-68,-7,3,49,-14,35, 82,40,44,71,-23,-43,-75,-59,13,25,103,-42,53, 
  /* [2][0][][] */ 60,-93,-10,9,35,5,-52,-13,23,-29,-31,-2,-1, 100,10,19,-19,22,16,11,-1,13,12,3,-58,6, -64,-94,127,-15,60,25,-12,5,28,5,34,34,-32, 
  /* [3][0][][] */ -22,127,17,18,-39,-5,96,-24,-31,-42,22,22,5, -5,-2,-13,-30,-1,-80,-61,16,-3,20,42,38,-11, -55,-72,-59,-58,-2,22,-19,-30,42,67,37,-22,29, 
  /* [4][0][][] */ 40,115,-70,-76,39,43,45,87,100,76,37,-63,-102, -121,96,-47,75,68,23,23,-13,50,32,26,-64,19, 49,-16,53,127,104,37,-91,124,57,66,-26,79,1, 
  /* [5][0][][] */ -6,25,104,127,85,58,29,-28,-86,14,-45,-43,-39, 3,0,-43,-24,-86,-27,-104,-16,28,51,91,33,-12, 27,34,-51,-87,-18,-53,26,-18,34,53,45,-21,-33, 
  /* [6][0][][] */ -127,42,10,18,33,-57,15,85,-36,-47,48,-16,28, -63,-50,67,-3,65,-72,-39,-44,1,54,48,-25,95, -103,52,44,34,48,38,-78,-31,-29,-82,-1,12,-66, 
  /* [7][0][][] */ -31,80,43,-32,1,82,122,84,11,61,-41,-36,35, -74,38,23,96,29,-2,-89,-36,63,-33,-13,42,64, -127,-94,-31,-52,-12,-59,-27,43,-31,62,-62,-91,6, 
  /* [8][0][][] */ 54,-45,-33,71,32,87,127,-53,-12,-44,40,72,-21, -4,-94,-40,-111,77,34,-15,-29,-48,-73,26,-36,15, 56,51,-27,45,28,3,-10,-14,-60,-77,17,-37,96, 
  /* [9][0][][] */ 11,-98,19,15,-13,50,39,84,36,15,-36,96,127, -76,-19,67,100,54,26,80,-7,-49,81,2,-56,-50, 19,-59,123,67,-8,32,-101,-79,126,-8,16,10,-11, 
  /* [10][0][][] */ -127,-85,-118,40,12,42,-71,-39,62,37,-52,90,-28, -83,-95,-78,29,18,-26,38,-47,-28,17,104,54,28, -71,-61,-22,-58,-5,124,45,-54,-25,13,4,38,7, 
  /* [11][0][][] */ -1,-73,89,32,-26,52,-57,86,-11,51,-32,33,86, -18,-15,106,-59,-51,44,-7,38,40,-2,25,46,72, 42,-13,127,-106,-103,-8,34,64,-11,16,52,-54,68, 
  /* [12][0][][] */ -40,-18,-13,52,-14,5,-40,-17,-57,45,17,28,-14, -80,-29,-41,77,0,14,-70,-2,-16,81,43,25,13, -127,-30,-37,36,2,77,0,14,-9,44,81,-13,42, 
  /* [13][0][][] */ 15,15,-24,66,88,52,-26,72,-12,-15,-2,54,49, -60,-97,-127,-2,104,103,83,-18,-37,6,-15,-7,-73, 89,49,-70,-26,61,109,107,31,-41,75,-38,-103,-75, 
  /* [14][0][][] */ -80,12,67,8,-10,55,-13,-126,52,6,-77,19,-28, -16,52,26,-22,-17,-127,84,2,-127,59,41,-51,35, -88,34,45,-27,75,45,-93,22,-38,-70,-6,80,83, 
  /* [15][0][][] */ -127,-71,44,20,27,22,39,7,-8,-43,18,16,7, -71,-11,-25,-14,12,44,29,-34,0,-19,12,7,16, 54,63,-15,-69,-56,20,69,31,-59,-2,-33,-21,2, 
  /* [16][0][][] */ -69,73,-18,54,69,-16,-112,-82,-2,54,61,-29,50, -93,66,30,23,107,-34,-83,-23,-9,-30,-42,-32,-43, -89,-12,6,93,127,-40,-49,-77,-14,-49,-18,81,-65, 
  /* [17][0][][] */ -86,17,-35,-63,58,37,55,-21,-42,-4,36,4,6, -94,-80,67,-40,-35,-16,86,78,-1,4,-68,-21,-16, 70,-80,6,61,-54,-74,-127,-97,88,29,3,4,41, 
  /* [18][0][][] */ 31,-54,24,36,-2,-19,19,-20,30,19,16,-20,7, 99,-28,-37,-32,-19,-28,-15,38,44,7,11,-10,16, 127,-22,-27,2,8,-22,22,60,9,30,-19,-14,17, 
  /* [19][0][][] */ -25,-17,-9,-31,-77,46,10,-12,-13,13,50,21,-46, -94,-16,13,-82,11,-20,56,42,40,26,38,26,-27, -127,-97,26,-1,-21,-28,-29,32,12,57,21,-1,12, 
  /* [20][0][][] */ -74,55,36,16,-45,-8,-34,-80,-68,-18,-46,-117,-5, -110,-17,-73,-80,101,127,66,41,-87,-28,-91,-9,63, -52,-67,-32,33,54,15,13,-37,24,6,3,-52,4, 
  /* [21][0][][] */ 46,45,-42,-54,-42,127,122,117,26,19,-93,-11,27, 2,89,-110,-3,-45,37,28,-37,78,-9,-27,2,-10, 24,-37,63,-6,-47,2,-65,28,-12,84,-85,-36,-10, 
  /* [22][0][][] */ -96,75,13,-46,-72,-33,-27,-87,-24,-33,-4,-9,60, -96,-29,127,-67,14,-49,6,35,59,-3,0,2,-17, 62,-9,43,44,6,-6,-2,-27,-74,0,25,-5,0, 
  /* [23][0][][] */ -39,-35,-118,-28,111,-8,-106,-45,-60,22,49,47,-37, 66,85,105,116,22,-127,-53,-77,21,-116,-59,-110,-30, 100,-11,13,61,118,-91,-31,-25,-68,-40,-37,35,0, 
  /* [24][0][][] */ 74,33,0,-18,-43,15,-20,-22,9,53,61,-45,-50, 81,-6,-50,41,-11,-40,-55,40,-53,34,61,-13,-127, -73,-36,-11,-33,-16,9,33,32,-15,-17,85,20,-73, 
  /* [25][0][][] */ -94,-122,-75,37,-4,-55,-22,-15,40,7,14,67,74, -122,-84,-33,-35,61,90,53,43,-18,-38,34,-89,-39, -127,-22,-19,2,-5,-53,-54,5,60,8,0,-34,-15, 
  /* [26][0][][] */ 127,105,0,6,-30,44,-46,-4,-4,42,58,-75,-80, 5,117,21,115,-32,-63,-67,-12,8,-35,68,-12,-11, -30,84,105,29,46,8,-93,-19,-49,30,-13,-14,-53, 
  /* [27][0][][] */ 93,-17,-10,-58,4,-11,-12,-5,21,-58,-47,27,18, 116,-31,-46,4,-5,-14,-25,-7,3,7,-27,3,-26, 127,-48,25,19,18,30,25,-90,24,11,24,-30,-22, 
  /* [28][0][][] */ 84,-36,62,1,34,-17,-69,-60,-27,77,93,2,-24, 56,63,108,53,55,7,-43,-12,-81,-2,32,30,-53, 127,-25,50,32,20,22,12,15,-5,1,45,-22,-10, 
  /* [29][0][][] */ 69,-98,90,22,21,117,-44,-1,57,4,21,0,-43, 15,-127,43,7,32,12,12,-45,17,-20,29,18,-24, -10,-124,17,55,84,50,-18,-58,-53,-6,-8,-19,-1, 
  /* [30][0][][] */ 21,124,48,-59,-86,27,66,-98,1,-32,41,-22,38, 108,127,61,-75,-85,-22,74,-49,-37,-5,3,79,2, 37,53,64,-13,-61,-32,56,-1,-79,35,-4,0,-1, 
  /* [31][0][][] */ -26,-39,15,104,-69,-12,-32,-3,-12,-10,32,21,40, -55,-102,-31,62,-97,-127,-71,-9,17,27,18,36,25, 56,-72,10,88,4,-61,-18,79,-6,-18,-33,30,42, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,1,3,13 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0028446135111153126, 0.0031599639914929867, 0.0041946065612137318, 0.0044272458180785179, 0.002441242802888155, 0.0036757036577910185, 0.0027326950803399086, 0.0034118159674108028, 0.0029550460167229176, 0.0030974154360592365, 0.0027425684966146946, 0.0027192318812012672, 0.0038644475862383842, 0.0030080932192504406, 0.0026358552277088165, 0.0053917090408504009, 0.0029574374202638865, 0.0031459641177207232, 0.0043599014170467854, 0.0042825937271118164, 0.0030067763291299343, 0.0031463529448956251, 0.0044308993965387344, 0.0028314464725553989, 0.0033990240190178156, 0.0032015484757721424, 0.0030774071346968412, 0.0045558847486972809, 0.0033203773200511932, 0.0039141541346907616, 0.0033471721690148115, 0.0035197513643652201, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[32] = { -1320, -1751, -601, -762, -1248, -1127, -132, 419, -535, -517, -569, -1784, -1064, -492, -351, -275, -188, -830, -612, 140, -246, -397, -245, -547, -1910, 1077, -2557, -1103, -948, -750, -1117, -1304, };
const TfArray<1, int> tensor_dimension7 = { 1, { 32 } };
const TfArray<32, float> quant7_scale = { 32, { 0.0001413317077094689, 0.00015699956566095352, 0.00020840471552219242, 0.00021996315626893193, 0.00012129064270993695, 0.0001826235675252974, 0.00013577114441432059, 0.00016951256839092821, 0.00014681842003483325, 0.00015389190230052918, 0.00013626170402858406, 0.00013510225107893348, 0.00019200111273676157, 0.00014945401926524937, 0.00013095975737087429, 0.00026788152172230184, 0.00014693723642267287, 0.00015630399866495281, 0.00021661721984855831, 0.00021277627092786133, 0.00014938859385438263, 0.00015632330905646086, 0.0002201446914114058, 0.00014067751180846244, 0.00016887701349332929, 0.00015906564658507705, 0.00015289781731553376, 0.00022635445930063725, 0.00016496953321620822, 0.00019447073282208294, 0.00016630081518087536, 0.00017487522563897073, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[64*1*3*32] = { 
  /* [0][0][][] */ -35,-70,-13,-11,-14,-26,-18,-34,-9,-44,-57,-2,-40,-10,-59,-32,-104,-55,-78,-76,12,29,-2,-71,29,-34,1,-28,-17,-21,38,-87, 31,9,-4,-62,41,-57,-52,-41,0,12,-54,-40,-47,-18,7,-90,-28,-108,-89,-49,-11,0,-21,11,14,-24,29,2,55,-24,24,-68, 31,16,12,4,-3,16,31,9,48,13,-49,-14,-76,93,3,-13,50,-19,-127,-29,5,-32,22,69,-9,-11,47,-83,65,6,-11,-23, 
  /* [1][0][][] */ -35,-32,-99,-62,-20,9,47,-17,-11,-20,-43,-31,14,14,-1,0,-30,-34,-34,-6,25,21,40,-89,-17,-9,-30,-13,-32,-69,-17,-45, -17,-23,-127,-11,-31,-23,53,44,33,-32,-35,-59,14,4,-4,6,12,49,-12,-102,78,30,-18,2,17,23,-91,-36,-87,-49,-6,-96, -11,3,-13,61,16,19,71,36,33,-65,-31,-26,-1,-37,10,-83,75,8,-96,-73,102,-25,109,71,-69,32,-53,-114,-102,-30,-39,-118, 
  /* [2][0][][] */ -117,-24,18,13,-57,-3,22,8,21,-19,10,-15,-23,6,-3,-20,-14,-97,-76,50,-5,-103,0,-1,-83,-48,31,-34,15,-30,39,-12, -63,14,-85,-127,29,14,-106,-99,44,9,29,-47,-44,30,-24,-112,-75,-64,14,16,-77,-1,47,-11,-20,-27,-81,32,2,-96,7,-15, 52,-30,-3,12,48,-10,-49,-7,-4,-39,-76,-21,-3,-65,-76,-80,-121,-69,-95,-35,-44,-116,35,-92,-38,-26,-75,-23,-78,-12,-108,17, 
  /* [3][0][][] */ -87,-110,-66,35,-37,-87,-28,48,-66,-93,-50,-16,-114,-73,-99,-82,-100,-13,-99,-9,-51,23,-60,-12,-28,-91,-99,-96,-96,-9,-118,-114, -87,-127,-12,57,31,55,46,-45,2,-99,-68,-35,-104,-119,53,16,-22,72,-54,13,31,-92,-78,-58,-55,-60,-103,18,-101,-35,39,25, -1,-21,-60,-34,-47,-46,-8,-68,-45,-107,30,-55,-46,-92,16,10,57,-12,-88,30,10,30,7,-3,-59,55,-116,7,8,-44,-50,-38, 
  /* [4][0][][] */ 29,-63,-38,-53,47,-110,43,-49,-42,20,32,-43,41,-42,-15,8,27,54,-82,54,45,-14,-36,-59,-51,33,-63,-82,-71,-22,-5,57, -57,-94,-4,-31,-55,-24,-7,2,44,-21,55,69,7,2,-18,127,20,-49,-89,7,-29,-33,5,-5,-57,29,-66,-6,-18,-35,-9,-36, 20,-50,-84,-16,-21,36,26,-38,50,-93,-10,7,-44,39,-58,70,-23,-17,77,-90,-29,-13,-41,-28,-35,-98,-28,94,-32,-47,90,-51, 
  /* [5][0][][] */ 20,10,-78,9,-41,15,-70,-73,-29,15,-62,-58,-79,-54,-26,39,-83,-6,-44,15,-20,-25,-39,-3,6,6,31,14,-41,-89,-51,-15, -32,19,-33,-88,-84,-57,0,45,-120,-66,-94,-64,-28,39,-3,40,-93,45,-47,-14,73,-64,-62,-81,-15,-47,49,14,46,12,-104,6, -22,28,11,-11,13,46,1,-29,11,2,-88,-97,-95,-74,49,-42,-127,23,12,-3,-21,-87,-35,43,6,-47,-2,22,-11,-42,-74,6, 
  /* [6][0][][] */ 22,-15,6,-52,-127,-45,-2,-67,-19,3,-32,-49,-64,-21,46,-67,-7,50,-44,-37,-59,-12,-33,15,-90,3,-105,5,-106,-54,-35,-21, 21,27,4,-77,-112,-37,34,-73,-22,-31,-50,-61,-11,-45,41,-10,23,-38,-73,-1,-8,-14,21,17,-56,20,-24,-26,-83,-40,-17,-2, 94,76,-72,-10,-26,-65,-18,-22,-32,38,-66,3,-37,-115,-6,27,-28,-36,-22,-44,3,31,50,17,81,-81,62,8,-2,-65,1,-53, 
  /* [7][0][][] */ -42,20,27,68,-40,-30,22,-2,-74,24,12,27,50,7,-37,-69,37,-8,-65,10,-20,-40,51,-53,-42,47,-92,-70,-54,5,-42,59, -103,-27,-52,1,4,-2,-8,7,-6,21,48,-25,39,43,-8,105,0,30,-19,10,-127,-86,-47,-109,-87,9,-85,-63,-57,3,2,21, -71,-62,-23,-88,-31,4,-38,-30,4,-60,-26,-18,-59,-28,-86,46,-59,0,30,-63,-73,52,-29,-64,50,-39,86,92,-27,-41,96,13, 
  /* [8][0][][] */ 24,-8,9,-18,6,17,44,18,18,54,-36,-32,-34,-67,11,-32,30,5,0,-42,35,-84,47,-18,-54,-34,-127,-59,-34,38,-109,29, 62,-13,45,-35,-5,-51,41,-7,21,42,-38,-14,-82,-12,20,9,47,69,-27,5,35,-72,-19,-5,-62,32,-104,-48,27,3,-96,-8, 54,-58,-18,-26,29,-70,-11,22,46,-4,-65,-32,-31,72,18,34,37,-44,-30,-85,-15,-39,13,47,-5,-39,-28,-51,-29,-2,-37,1, 
  /* [9][0][][] */ -120,-23,-25,-15,-101,-38,-73,36,1,-19,-10,12,-37,-51,-92,20,17,-18,-10,-30,-55,69,29,-85,-72,2,-51,36,-93,-9,-3,-77, -28,-46,48,-33,-22,-18,-80,-1,-32,-31,-50,-48,-12,-93,-7,-82,-5,29,42,-28,-47,32,-57,-16,26,-32,-2,33,-55,-57,14,-47, 54,87,-22,-11,37,-4,24,-116,43,-67,-127,-44,2,-65,-6,-55,83,-94,73,-36,-16,-99,5,99,-32,-90,70,48,60,34,-13,58, 
  /* [10][0][][] */ -31,-4,-13,42,-53,-29,-35,-50,44,-85,-55,-38,-29,-5,-32,-102,-77,-94,38,-77,3,41,-24,-6,41,-30,37,36,-5,-66,63,-82, 56,-54,-54,-13,-33,4,-57,33,-2,-82,-16,-68,-49,-20,-11,-3,-13,20,-91,35,55,36,21,-40,2,46,-25,-39,-105,-73,38,-2, 45,-45,-56,35,33,0,45,47,-43,-46,26,6,2,14,22,-5,-48,105,-66,63,70,-30,23,-77,-28,-5,-17,-127,-93,-93,6,43, 
  /* [11][0][][] */ 21,48,-50,-85,78,55,-1,33,-72,38,6,16,11,-19,-69,-56,-16,51,8,-24,16,-12,-37,21,-2,14,-6,-64,-14,4,-57,91, 26,75,-72,7,-32,4,-27,-127,-117,35,-90,9,-83,-103,-64,-92,-65,43,29,-81,-4,-102,-36,51,-2,-92,-95,32,8,-51,-17,50, -17,-7,-50,-7,14,-26,-27,-64,-16,15,-98,-71,5,49,-27,-57,-55,-60,39,30,-53,30,-126,-4,-8,-107,-21,30,-2,-1,-22,-7, 
  /* [12][0][][] */ -28,41,52,-15,-47,-78,-107,-5,50,52,16,45,-15,-27,-59,-93,-50,-73,33,-42,-76,-115,-101,-36,-3,-20,-24,64,41,127,-73,43, 30,37,-3,-65,-60,43,13,52,44,7,14,27,48,-55,-54,-63,8,74,-38,-35,-17,-107,-19,26,-42,0,-52,-12,-25,81,24,-57, 34,108,-17,32,-110,87,-80,-75,-62,-44,-82,-73,-68,-40,-26,-9,-125,88,51,-108,-90,-105,-7,21,-67,-99,3,8,37,-68,73,4, 
  /* [13][0][][] */ -61,-100,-118,35,-82,-8,27,-26,-78,-67,2,-69,-22,-58,-31,10,-120,-3,-59,22,-98,-4,-127,-27,-13,-37,-66,-60,-4,-10,-122,10, -14,-19,-39,6,-85,-49,84,18,-81,32,5,46,-13,-43,40,4,37,-111,-63,-26,1,-17,-65,-34,18,-84,-56,5,-35,22,-70,64, -65,31,-72,19,-30,-23,-12,17,-105,-121,28,42,-84,-109,-28,-78,24,-2,-4,51,9,-17,-87,0,57,-116,-8,-86,13,-81,42,66, 
  /* [14][0][][] */ -18,-95,9,4,-23,-80,31,31,-72,-51,39,-12,-14,-71,43,44,73,28,-51,-26,-6,13,60,-50,-73,57,-17,-60,-112,-23,-26,-45, -127,-81,-44,-46,5,21,3,22,-39,-69,51,40,-38,-61,-12,41,-2,-60,32,-32,-47,53,15,-101,-90,-59,-10,-1,-21,-34,69,-46, -91,-68,25,26,-40,17,-42,-13,27,-95,-37,10,-28,5,-91,20,-50,-7,68,-27,-82,28,-4,-12,10,-54,14,63,3,-64,1,-40, 
  /* [15][0][][] */ 61,-93,-16,69,12,-40,0,-20,43,-17,-15,-40,-102,32,54,55,-1,-24,0,16,4,7,66,-65,-23,-72,-30,-33,-10,-42,21,22, 24,-77,-43,-69,-50,-36,27,-37,23,-1,-9,-9,-52,-2,-34,41,42,70,-42,18,4,-36,12,-34,11,-7,-127,-18,-49,-7,10,73, 81,17,9,-33,37,-38,54,-30,41,-24,-57,-65,17,11,-30,-26,-10,6,-68,-113,-43,-75,1,5,-44,-27,-75,-49,-29,-59,-71,90, 
  /* [16][0][][] */ 11,-34,21,-98,-90,-56,-18,-53,5,9,32,50,14,-59,5,-46,28,11,14,-33,16,-24,-81,-65,-49,3,-70,-21,11,70,-63,33, -94,10,67,-61,-127,-25,-22,-81,-13,45,57,3,13,-74,-28,-24,-7,39,-36,9,22,-68,18,-7,-76,-3,-34,-8,-6,55,-31,-24, -44,22,17,42,-121,85,-66,-91,0,58,-68,1,-119,-73,-76,-17,-64,35,26,2,-74,-47,-28,8,-26,22,-3,65,-2,58,8,-16, 
  /* [17][0][][] */ 56,-62,-84,3,53,-67,-110,11,23,-44,-29,-97,-48,-34,36,-125,21,-79,15,50,60,-78,2,-127,-11,-39,3,25,-79,-4,-88,-24, 0,-124,-43,27,-125,-86,-83,-117,-93,-92,-27,-77,-53,10,-77,-24,5,-110,-37,-54,-32,-78,-53,23,-62,-76,46,-5,-98,-76,35,53, -86,-108,32,-37,-28,-55,25,41,-110,73,-28,15,27,-48,-55,79,-22,-29,71,5,-115,-41,21,8,-112,69,42,51,-91,-22,-7,39, 
  /* [18][0][][] */ 47,49,8,-59,-13,-80,42,43,-42,-6,1,-24,28,30,-45,-6,54,-54,-24,-8,-10,2,-68,12,57,42,-38,14,-10,-42,-37,30, 20,37,30,-6,9,-127,-60,-27,-56,61,6,-13,-21,-18,-28,-40,14,32,-35,-27,0,-23,47,9,-28,-58,13,63,6,67,-65,42, 13,51,-21,-84,1,-57,-75,-16,-51,8,-1,19,61,-77,40,-49,-60,3,-22,11,-65,-8,-28,-42,2,-79,-44,-44,-21,70,9,83, 
  /* [19][0][][] */ 41,46,28,-2,-10,-60,-9,-14,-8,23,3,9,-24,22,-3,-29,-10,21,9,-27,-38,16,-34,-23,-70,7,6,1,11,52,-45,72, 1,-32,45,-65,-69,-71,-81,-127,18,27,-44,58,-62,-40,-42,-33,-62,-28,29,21,-39,-81,-105,2,-77,7,-19,25,3,78,-66,-28, 16,63,8,-35,-96,-12,-42,-64,-40,29,-77,-9,-74,-111,-75,-17,-14,3,-24,59,-66,-93,-73,-28,-46,10,32,18,54,34,-47,5, 
  /* [20][0][][] */ -48,-65,8,39,-4,33,58,-20,41,21,-115,-85,-44,31,-22,-77,43,-13,-4,11,-26,27,-23,-68,78,-20,85,48,38,-69,39,-21, 29,22,-2,24,72,17,34,107,-66,-40,-62,-24,-21,-38,-11,-71,59,-3,-33,37,-31,68,-8,-127,-30,22,41,-65,-12,-45,-15,37, -26,-31,-73,36,20,29,20,57,-53,40,-48,-71,-23,3,-7,-47,-3,55,-44,62,-89,-7,5,-112,37,80,-49,-32,-67,-114,-15,61, 
  /* [21][0][][] */ -12,58,-47,45,29,35,36,9,-50,1,9,-14,-127,40,64,17,35,28,-43,-53,8,-78,52,94,-3,-6,3,-112,41,-26,22,-86, -68,-46,-17,96,38,-27,22,-11,-51,-91,-27,-54,-60,33,12,-73,-15,4,-11,-90,-47,-20,53,72,55,-34,5,-20,29,-22,-19,-44, -42,-60,42,30,-45,25,11,-2,25,20,2,6,-13,47,-40,7,-7,5,-35,44,-6,45,-14,15,16,39,-19,12,9,8,-11,-22, 
  /* [22][0][][] */ -22,49,-38,30,13,-66,-63,-8,-33,-6,-14,6,-34,29,16,74,-36,4,42,-94,-43,5,-108,-79,22,-18,34,-17,0,-36,-94,12, 9,-31,-30,-94,-94,-103,-111,-104,-47,-40,29,-14,-10,27,51,9,-7,17,-3,-26,100,-47,4,-45,-36,-7,-2,-85,-23,-102,-3,-12, 24,-10,-75,-79,14,-68,-102,-39,18,-102,-13,1,-8,-46,-1,-34,-45,-97,-38,-64,47,-61,13,27,-8,41,-1,-80,-84,55,-91,-127, 
  /* [23][0][][] */ -67,37,-38,-35,-52,29,-59,-8,23,-33,3,-2,38,12,-54,-19,-55,-23,9,-35,-40,-5,-70,-26,50,-15,25,63,-57,51,-7,5, -31,-4,-27,-4,-1,56,-47,-73,-11,-85,72,-63,10,23,-17,-32,-15,-37,-28,58,5,-30,-42,-40,39,10,51,-11,-21,-28,43,-8, 9,-3,-67,21,9,21,-60,22,13,8,-4,-93,-9,-9,83,-7,-57,34,-82,77,22,6,-17,-64,29,5,4,-127,-47,38,22,26, 
  /* [24][0][][] */ -5,18,-14,6,12,-63,-9,-41,-54,23,45,-12,34,-27,36,-22,9,-36,-21,-19,44,-64,-18,-52,-26,-12,-45,-5,-42,-5,-127,49, -33,47,10,-79,-8,-2,2,-22,-33,25,24,31,-12,-57,-34,-43,-13,3,5,-11,-33,-36,-78,26,-10,-27,-46,18,-30,19,-67,17, -56,-19,64,-45,-47,17,2,-41,-43,38,-5,24,-60,-56,-31,-58,-26,36,25,17,-50,-82,7,-30,-19,-24,-42,32,33,60,17,-43, 
  /* [25][0][][] */ -49,40,89,31,-44,-90,-6,-9,-63,62,-36,33,-4,7,-22,-53,-47,17,24,-40,76,-112,53,41,-9,-83,-12,-12,11,-20,-127,76, -76,-34,47,-90,-95,-101,-34,-33,-30,19,-85,87,-90,-69,19,-87,-25,18,33,37,-3,-36,76,-19,-52,-27,-56,27,3,51,10,-25, -39,25,-61,-5,-59,94,-29,-106,-55,-36,-96,33,-44,13,-8,12,-13,90,-32,100,-48,-68,-7,-92,-10,33,-24,61,32,58,-25,-47, 
  /* [26][0][][] */ -18,1,4,-32,-4,-21,-3,2,-20,-12,78,26,7,9,-87,-1,-5,-62,23,29,-34,39,-37,-15,-29,-1,20,49,-65,-37,3,55, -71,28,-72,-37,9,9,-49,-19,6,-91,4,12,-13,-8,-24,5,-49,-43,10,23,-38,54,-71,-52,16,-61,33,6,-26,-77,-3,-52, -11,41,-26,5,17,7,-7,-25,23,-58,-21,5,26,5,28,29,-26,-127,43,9,-39,12,15,-25,30,-27,39,12,5,-46,31,-90, 
  /* [27][0][][] */ -32,12,19,-60,10,-27,-42,-36,-105,-92,-116,-38,-89,-5,-62,-84,1,-100,38,-61,3,-94,45,78,54,7,-42,26,-29,-77,-60,93, -17,2,-37,30,-21,-50,-48,41,-14,-53,-10,-91,-75,16,0,23,-71,-56,40,-3,10,11,-7,66,-49,-8,-43,29,-33,35,-103,-24, 10,12,-35,9,-107,12,-91,-1,-29,-55,69,-106,-32,127,-17,47,-41,-21,7,36,35,-11,14,34,-49,32,-9,89,-71,-43,-71,-7, 
  /* [28][0][][] */ -23,-17,-35,20,42,48,9,101,-67,-11,-22,-43,-82,-3,4,20,27,-22,-105,-18,1,42,81,45,52,-46,65,-115,-5,2,-34,-66, 18,-58,63,107,-52,-19,-8,49,49,9,7,-50,-49,29,47,123,-83,44,19,66,59,34,55,-49,-47,31,-127,-39,19,-9,-37,-42, -18,-51,75,8,32,27,-18,12,28,38,-118,8,-65,78,20,74,-45,-23,-15,-44,-61,47,38,107,22,11,56,19,13,-5,-32,-37, 
  /* [29][0][][] */ -6,-24,-103,-44,-4,37,-38,29,55,54,29,-34,106,95,-17,63,-10,-53,-61,-14,12,-22,-39,-18,-58,75,25,-54,-127,-88,24,13, 16,-58,-43,-36,96,34,-67,54,-34,31,30,-92,59,-28,-64,-54,-56,14,-37,3,85,-1,-53,3,-89,-20,45,-68,-55,-63,-19,22, -56,-61,-9,-52,78,56,1,15,7,-38,21,12,10,-23,-61,-1,26,-24,-46,-3,82,10,-8,64,-52,-22,45,19,-55,8,-3,-28, 
  /* [30][0][][] */ -6,64,-20,-57,67,5,6,-110,-54,-83,-63,-53,-35,-76,-15,-125,40,-22,46,-92,-89,-28,-6,61,51,-103,48,-36,20,21,-21,101, 30,82,-58,49,-57,-24,1,-127,-96,-11,-52,-44,-7,-65,1,-13,-34,-28,-46,-45,-91,-119,-17,80,8,-64,-14,-30,26,-53,-57,69, 21,71,-59,-38,-24,-17,-44,-69,-16,-67,-19,3,20,-69,-19,-2,40,-27,27,-25,-62,-71,31,12,38,-50,9,-10,2,-87,25,44, 
  /* [31][0][][] */ -20,-95,16,35,-65,16,-12,-80,22,33,-15,53,-8,-35,31,-19,-33,18,-103,-44,-5,9,-40,-85,-16,-99,3,19,0,-9,-55,-23, 80,-58,-20,-24,-37,12,-35,-90,23,1,-47,33,12,-60,-45,29,-83,-27,-64,-42,-103,-56,-81,9,52,11,-114,-71,20,31,17,33, -69,-72,3,11,25,66,-96,-74,45,-27,-57,-22,-102,-118,29,-14,38,15,-127,-65,-11,0,17,-27,-46,-51,21,-62,-1,16,-24,7, 
  /* [32][0][][] */ -67,31,-31,54,32,-16,-62,-66,53,-96,-116,-28,-71,22,-93,-102,-4,-48,39,-66,-42,33,-75,15,-5,-113,0,35,-20,28,11,22, -7,64,-5,-8,20,-21,-59,-38,-16,-41,22,-42,127,37,17,-38,37,-25,18,-57,15,1,-59,7,-3,-70,34,-13,15,17,-58,-24, 10,9,3,-55,46,-20,-8,-54,6,-45,-5,-36,-1,-76,-19,-97,47,-76,-26,-32,7,-64,-18,33,6,-98,-15,-18,18,17,-34,69, 
  /* [33][0][][] */ -95,-34,-53,-10,24,-98,-57,13,62,-34,0,9,-48,-91,-54,-26,-63,12,-29,-14,-17,77,60,-102,-33,-47,-17,8,-52,-43,66,-96, 31,-5,19,-28,-50,-91,-7,5,21,-26,-37,0,8,-66,8,20,38,-53,-62,-82,-44,24,-20,44,-17,-71,-21,1,40,-63,27,-71, 69,16,-49,-27,-42,-121,62,-71,76,11,-64,-27,32,4,-74,-63,29,-108,20,-42,-38,-2,27,79,11,-127,12,45,36,-35,15,-112, 
  /* [34][0][][] */ -10,-73,-43,24,-2,49,62,30,24,-67,25,-91,90,49,16,-57,52,-13,-36,-113,61,-36,39,41,34,-50,-49,-57,-55,-67,51,72, -6,-56,-10,29,8,-49,17,57,43,46,-93,-30,-3,90,-83,-92,36,-8,-69,-81,76,-5,10,-127,-79,2,-15,-48,-7,-66,4,2, -19,48,45,96,35,32,-9,58,-58,-34,-45,-81,-68,12,-56,-22,-10,7,-5,-31,19,9,-62,-36,-3,33,-107,-100,-77,8,-73,2, 
  /* [35][0][][] */ -68,-31,23,-19,-71,-109,8,-15,32,27,37,-7,50,-91,24,38,37,19,-72,52,45,-83,-21,-67,30,68,-70,-61,-25,22,-91,-67, -123,-26,-20,-40,-111,-127,-10,-23,-22,-9,20,21,114,10,24,-44,1,25,-45,69,9,-44,61,-50,-124,50,-90,-78,-14,18,-60,-26, -60,53,-21,-114,-94,-53,-6,-53,3,-34,93,69,2,-43,0,-16,30,-50,-80,22,-15,-62,3,-17,-103,70,-35,-123,39,61,20,22, 
  /* [36][0][][] */ 81,-27,-40,93,100,-26,-69,-51,-10,-49,-31,-34,16,-35,-10,27,15,-10,-73,-41,79,23,92,-31,55,-50,44,-56,6,-49,-52,-34, -94,58,39,-64,30,91,-87,45,1,61,2,5,65,9,34,25,-74,34,109,7,-40,-10,11,35,-91,-25,-26,54,-33,25,-74,117, 22,49,0,-10,42,21,-97,-13,-77,66,25,18,50,25,-127,-27,-37,-62,22,-8,-82,-9,-108,61,43,-84,-22,-28,2,-44,-52,-55, 
  /* [37][0][][] */ -77,-58,-50,-63,-13,-83,26,-20,-25,-15,39,58,-4,-127,7,55,-38,84,-5,23,-20,5,25,-89,-60,21,-14,-9,-56,-58,-15,-43, -47,-49,-44,12,-30,-43,-51,4,19,-44,-11,-2,-100,-77,-57,14,-81,-103,42,-59,-71,29,-46,-8,-65,-56,-31,17,12,-33,53,14, 4,-45,-32,29,-67,-26,-22,4,85,-8,64,2,-17,39,-74,11,-36,-72,39,-66,5,10,-42,8,-29,-72,-123,41,-61,72,46,-65, 
  /* [38][0][][] */ 67,51,9,-50,30,60,1,-47,-64,27,0,-27,-59,6,-83,-96,3,11,64,-44,-35,-23,31,22,49,-34,38,6,54,-68,-120,70, -22,44,-47,23,20,21,-45,-37,-31,-112,-9,-86,-49,17,-53,-77,4,-23,41,-90,-12,3,-90,0,34,-127,-30,-17,-6,-45,-49,11, -23,-23,3,-2,-29,-41,-78,-29,44,-39,-14,-43,14,47,-36,60,-66,-46,4,-37,-61,32,-71,-50,-19,-66,-58,6,-81,-39,7,5, 
  /* [39][0][][] */ 35,22,-69,43,1,-44,-56,-33,-29,-98,-86,17,-21,-59,-50,-2,48,-65,15,-26,-96,40,-23,-3,-26,-127,2,1,-28,-107,31,30, 25,44,-64,75,9,3,-12,-64,-24,-82,-57,59,18,-32,-46,-22,58,-13,-9,-4,0,24,27,45,33,-99,18,42,-36,-76,9,26, -16,45,18,-56,39,-3,-35,-42,-17,-38,-38,15,21,-57,-36,-55,32,-23,56,-8,-42,-39,17,8,9,-79,59,47,28,-33,-4,30, 
  /* [40][0][][] */ 113,-21,7,25,52,76,-55,45,26,29,-105,32,-127,4,46,-17,-53,34,48,-19,86,51,95,56,7,-28,-20,-95,66,-85,-62,3, -33,25,69,60,20,80,-70,39,4,-55,-46,-34,-32,52,11,-21,-95,22,-16,10,-16,-56,-32,-8,3,-28,-15,43,63,-94,-46,34, 69,-78,12,78,-5,32,-32,50,-19,24,6,-73,-31,41,-27,12,-76,102,-20,4,-31,-6,67,-32,-15,45,-92,-2,-62,15,-71,34, 
  /* [41][0][][] */ 32,-127,47,51,87,-104,-19,-48,-30,11,-20,-79,-31,-20,-77,9,-117,41,27,9,20,65,74,-20,9,-14,-38,2,-21,35,-14,-59, -123,-12,56,101,-8,10,-28,-76,-5,-2,-34,2,-40,-104,-58,-29,-70,26,39,-22,-18,4,-100,0,-67,-23,-48,76,34,26,-44,-70, -52,-13,34,-60,-1,-20,-7,-40,5,16,-60,30,-55,66,-61,39,-22,63,-11,42,33,48,-60,82,-37,-16,-24,20,-37,-2,-81,-52, 
  /* [42][0][][] */ 35,-60,-17,52,-45,80,24,-87,-77,-121,9,-38,-72,-38,24,-34,46,-76,14,-61,-38,40,42,-59,6,-102,-90,-53,32,49,-34,35, 24,5,-35,48,3,-106,23,-112,25,-61,-26,16,-47,7,14,17,-90,-56,-101,-6,53,-72,-1,14,-47,14,-98,-83,26,6,-90,-109, -94,-60,25,-61,20,-127,-63,-101,-3,36,-100,38,-14,19,20,-3,0,-90,64,-24,11,-36,-18,44,13,-36,-23,-34,-59,-106,-89,-42, 
  /* [43][0][][] */ -76,35,56,-7,-75,49,-17,-112,58,2,28,48,15,-12,-81,-52,49,35,-53,-3,-32,-57,43,54,-25,45,-116,-1,-25,37,-11,-40, -47,-63,-20,-127,-65,-18,-27,-2,11,19,28,28,2,11,-5,88,-26,0,21,-16,-45,8,-90,-94,-108,3,-92,-80,-56,3,20,-37, 23,21,-98,31,39,-88,-79,42,17,-51,37,-40,-45,-52,-48,27,-9,54,-55,-39,-18,92,-9,-127,-99,-85,-44,-46,-46,-21,97,-32, 
  /* [44][0][][] */ -29,-4,68,6,-30,-1,-48,-110,-20,-96,-67,-89,-54,-49,-87,-23,-42,-58,67,-69,-80,-50,-127,54,51,-62,38,58,24,-61,-90,7, -19,-10,2,-28,-6,45,-59,-30,15,25,-42,14,-35,-8,9,42,-11,40,25,-84,-41,20,-37,58,-11,-15,-30,-30,-9,-9,-78,-11, -37,-88,40,102,21,25,11,77,19,11,-23,46,-75,36,-23,42,-56,24,-33,53,-25,-18,40,-70,-16,12,-34,-14,-41,1,-47,64, 
  /* [45][0][][] */ -89,-59,0,-112,-89,32,18,47,7,-59,-9,61,-36,63,-64,30,32,-28,-64,-10,-82,-116,9,-26,-31,-77,36,21,31,-109,24,-76, -87,-103,46,2,60,11,-74,-12,-93,44,-42,-87,65,-49,-71,-21,-36,24,-74,71,-71,-101,-78,-75,-43,-88,0,-115,37,38,-18,-79, 11,-85,-84,-84,-88,-27,35,10,-42,42,-41,-98,-78,-28,-69,-68,-16,-127,-50,-36,-52,-61,37,-16,53,-26,-6,-88,-23,54,-7,36, 
  /* [46][0][][] */ 38,-16,-67,-15,-4,-18,61,-19,-72,-8,-50,-10,7,-80,15,-43,45,0,-38,-1,-100,-87,14,-73,-15,-11,34,-50,22,-15,-64,-20, 44,60,-6,61,6,-35,41,45,-127,-61,-2,-114,11,-113,-19,-18,60,-41,-55,16,-59,-31,117,-35,-62,-79,43,-24,27,1,3,-29, -33,23,-7,81,-55,53,-25,-57,-62,-84,4,10,13,-30,47,-77,21,-29,45,43,-45,-68,-27,-54,37,-58,7,22,-13,-5,-98,19, 
  /* [47][0][][] */ -33,8,-46,42,-10,1,-71,-20,26,-83,-52,-17,-42,-1,4,-51,-127,-31,18,-19,-12,17,-30,-57,60,-101,58,69,33,-26,39,-28, -35,-32,-69,12,-6,42,-34,1,-17,-77,-4,-67,-63,-26,-6,-23,-31,23,-66,46,46,-17,4,-110,45,-35,41,-43,-17,-79,46,-5, 28,-42,-53,80,29,10,-19,42,-29,-22,27,-28,18,18,45,-53,-73,29,-70,81,-36,-10,34,-100,8,-7,-7,-85,-9,-45,-46,57, 
  /* [48][0][][] */ 4,-1,-60,-22,29,5,-38,-8,10,-119,-48,3,-10,28,-2,-81,-93,61,33,37,-20,32,-85,-55,78,-91,42,49,10,-45,35,-109, -25,-19,-73,48,12,11,-65,-6,-36,-110,-20,4,-58,-4,10,-19,-35,-29,-39,-23,20,2,13,-70,-1,28,67,7,-7,-22,11,-44, -5,-47,-9,91,33,27,-78,70,-18,-93,23,-46,-48,8,-34,7,-53,47,-91,28,3,13,-2,-21,-56,-63,-47,-92,-127,-6,-66,23, 
  /* [49][0][][] */ -57,37,-39,-42,50,-35,34,37,11,5,16,77,47,-2,-8,62,-12,16,-87,23,-5,-2,-17,-3,-97,-4,-50,-89,17,5,-51,-34, -6,42,-39,-56,52,25,-28,1,-44,18,-53,38,-81,-16,7,-77,-4,39,59,-14,-2,-10,50,32,27,27,-15,-51,60,35,-45,26, -39,27,-28,-60,-10,51,-106,25,-39,-49,-4,-19,-7,-62,-52,-127,-25,-30,84,-48,-19,-28,-115,-76,-30,-107,-7,-39,21,-69,-65,51, 
  /* [50][0][][] */ -86,-49,-16,50,-124,26,13,-62,-78,-102,20,-52,-21,-40,25,-110,-127,5,-46,23,5,-108,32,-37,16,-54,-13,-56,-20,8,23,39, 16,-17,-52,-30,-104,-62,-61,2,-10,-41,-6,-11,-22,-32,-20,-40,1,-8,-84,-18,-29,-55,46,-66,-72,63,46,-51,-25,-12,19,-98, 11,60,-88,32,-96,33,30,-21,-65,-21,16,-30,54,-73,26,-62,-74,-20,-98,1,-14,-15,49,-60,14,-2,-55,-61,-32,-7,19,-1, 
  /* [51][0][][] */ -67,-6,31,-47,45,-69,-41,-9,-86,-15,-21,28,-21,-61,-63,-83,-53,7,62,-8,-41,29,-48,48,30,-79,12,31,-10,23,-65,-33, -38,-8,27,-30,-18,-25,-91,-127,23,-49,22,-8,-34,24,-19,-21,5,-17,-3,-14,-105,-56,-33,25,55,-23,-49,59,17,37,-88,8, 11,24,17,58,9,-5,-22,-34,-11,11,6,16,-44,-94,-48,-42,29,-8,-5,32,-113,-73,-78,73,3,11,4,22,45,0,-22,52, 
  /* [52][0][][] */ 7,62,-14,48,-19,76,-25,-65,-46,-11,-60,-4,-39,-70,-22,-52,3,-26,-37,-36,1,-93,31,70,-6,-13,-10,-39,31,-32,49,-8, -56,-36,-39,14,4,-15,10,-86,-10,-19,-51,-22,-44,30,-35,-33,-13,-127,-10,-64,-42,-9,-17,8,1,-31,-31,-3,-44,24,48,-32, -4,-13,-20,-57,-21,-99,-79,-51,52,-46,-60,73,29,38,50,22,-90,-29,21,-79,5,24,12,-27,-18,-91,-10,24,-38,-26,25,-49, 
  /* [53][0][][] */ 36,42,20,-73,-37,69,-9,35,-25,-36,-25,53,1,-15,20,41,10,-110,-101,-50,55,-87,54,20,-19,-28,5,-61,18,-60,-43,-122, 34,13,-25,-26,95,-30,-59,-91,-73,21,4,3,2,-49,-19,-73,-24,-19,-11,-28,-26,-28,-7,93,-37,-29,54,5,41,-127,-91,-56, 1,-7,-64,12,62,20,-1,27,72,7,32,48,47,78,29,70,-45,-11,-31,69,21,18,-67,1,-12,47,-38,-4,-13,22,-31,-72, 
  /* [54][0][][] */ 62,26,-93,-118,-37,-57,-76,-57,30,-127,-58,-107,-48,75,-87,-17,13,59,-82,67,-103,-15,-106,-23,-68,-69,19,-80,-108,-82,-41,12, -23,32,-77,-62,66,2,50,-61,3,-20,39,-45,-40,48,-32,-119,69,4,-35,-50,-58,-53,-88,-86,2,-31,-57,-48,6,14,-13,-8, -106,-29,-99,-71,-42,16,2,-54,-87,-38,-99,22,-39,-78,81,-12,10,98,-9,8,43,-58,-88,-51,-10,11,-88,-58,-107,-86,38,32, 
  /* [55][0][][] */ -61,-9,3,-120,-18,35,16,-48,8,-51,56,-123,-10,28,57,-50,-127,17,-61,-71,-61,54,-9,-16,-7,-47,-42,-85,-108,40,16,-40, -37,37,-65,-9,-91,34,-15,-55,-108,28,46,23,-101,28,79,-22,-100,-49,-112,-15,20,-71,18,-4,-82,1,-78,50,-41,-14,42,-63, -73,-66,-95,-4,-72,51,12,-110,-74,89,-114,-94,6,50,71,-72,-101,-97,-21,-107,-70,-89,8,25,-65,-51,15,43,-28,47,-60,-117, 
  /* [56][0][][] */ -76,22,45,-45,11,9,-93,-26,-21,66,-6,33,30,5,-26,-47,-58,-38,-1,22,-32,-13,-127,-53,-28,-71,-25,-2,-17,52,-87,-13, 1,-24,11,4,39,37,-3,92,-74,49,-30,65,-22,-51,-12,23,-17,58,66,21,-55,-63,-54,50,-35,3,-70,5,-24,25,0,44, -68,33,-18,-6,2,40,29,12,-67,58,-40,36,-14,21,-35,-48,-19,36,60,-7,9,-67,-27,-14,-23,-20,-30,15,-60,30,85,-23, 
  /* [57][0][][] */ -11,-17,-81,4,-37,-17,28,-61,1,-27,33,32,28,-1,-56,107,-41,-21,-71,-17,-46,-85,75,3,-27,5,-23,-94,-46,24,-18,82, -37,-22,-91,45,-61,-8,-16,-102,-19,-127,-19,30,-2,-12,-68,45,-12,-109,-9,-37,-32,20,-15,-43,9,-31,21,25,-10,-30,43,-39, -52,12,-97,87,4,81,-91,-22,-30,-95,-45,65,18,-62,-88,2,-41,-18,16,-36,-37,41,-47,-30,97,-45,41,32,84,-55,39,-71, 
  /* [58][0][][] */ -3,25,-4,12,-20,57,-20,-25,-58,-30,-31,12,-7,-25,-70,-86,-62,-50,30,-43,-38,-59,2,34,65,-22,4,3,50,-16,6,12, 10,-127,-13,-45,1,-44,-22,-68,40,-20,-1,-41,-10,83,-65,-15,-48,-24,23,-28,40,22,28,-69,59,-5,-29,35,-76,24,-35,-22, -31,-86,14,-42,3,-54,-40,-34,42,-1,-22,12,-47,4,20,21,-48,-53,-1,-37,-34,35,8,1,-3,-36,-5,-5,-62,-49,10,0, 
  /* [59][0][][] */ -3,-18,-54,21,-30,-107,47,6,-78,-21,-4,-6,49,-67,-14,-37,33,-51,-37,29,-42,-53,49,-50,-3,3,-100,21,-11,-13,-30,-10, -46,5,-15,12,1,-24,20,10,-34,7,-5,-38,46,-22,20,12,-20,-7,-16,42,-28,-116,53,-98,-2,42,14,-32,-64,20,-8,39, -47,-31,-31,42,-1,-28,-7,48,-5,-77,-15,-127,10,-50,23,-38,-23,-61,-52,-14,-30,-84,-9,-78,-28,-34,-84,-69,-36,-42,-56,-31, 
  /* [60][0][][] */ 23,7,-38,-7,-5,-17,39,3,-54,36,35,21,-53,-31,24,-32,22,92,38,13,42,-53,92,-6,-84,12,12,-77,55,-45,-66,70, 56,57,-41,0,-32,60,-53,4,-45,-79,-14,-48,-38,-60,-67,-105,-30,-14,62,-98,-66,15,-27,-27,-5,-73,4,17,7,-45,-105,46, 10,-41,-54,-26,-56,73,-56,51,-79,-127,-11,4,-6,47,-61,-45,-22,-45,64,-63,-66,1,-94,-31,-9,-62,-65,17,-63,-64,-57,5, 
  /* [61][0][][] */ 49,25,-5,-58,-23,-119,20,2,-107,42,-68,37,-33,-45,-21,-10,10,-19,7,16,-48,-69,46,26,-72,24,19,-101,8,-23,-18,10, 46,10,-25,8,-6,-34,30,25,-80,-53,-86,24,-52,-25,33,-9,28,30,37,69,-109,-60,82,-90,-44,22,-36,-8,83,-1,-76,-30, 44,-11,-79,-59,-27,-107,65,-59,-105,-69,-68,-127,-21,-123,49,-65,-22,-66,-42,14,-13,-68,9,-92,-42,21,-92,-20,-69,-50,-89,23, 
  /* [62][0][][] */ 10,-86,-81,-51,-54,-49,-61,3,-62,61,8,-10,28,-1,-13,38,-59,-49,12,-7,56,-3,-47,-85,-73,-23,1,-7,-27,-30,17,-11, -49,-26,-54,-32,-13,-18,14,4,-89,17,-73,-11,-78,38,-75,-42,39,-54,-83,-25,4,-21,-19,-50,-67,26,19,-127,-106,-60,-32,-75, 12,-68,-48,22,69,0,47,67,-8,-52,-95,40,-46,50,17,15,-109,-7,-71,-78,-26,-61,-105,51,-11,36,-49,7,-92,-34,-83,2, 
  /* [63][0][][] */ 54,-54,-107,-13,-85,0,-103,-46,-43,64,-70,20,-11,12,-59,-66,-29,62,-12,67,7,19,-74,27,-49,-86,-89,5,-51,-51,51,-87, 18,-76,-18,-69,21,-85,68,28,-33,-114,-79,-62,-35,-63,-77,65,48,77,-96,-16,-110,-90,-112,-44,81,14,-40,19,-94,-2,-56,16, 34,-2,-44,22,31,-127,-54,-35,46,-12,54,-86,40,-86,-53,59,-74,58,60,-26,11,-51,-80,-66,-11,-1,-50,-71,-76,-97,46,-17, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant8_scale = { 64, { 0.0040923985652625561, 0.0028831858653575182, 0.0016378178261220455, 0.0019295704551041126, 0.0035474854521453381, 0.0019194073975086212, 0.0031357209663838148, 0.0031052811536937952, 0.0035658800043165684, 0.0033639695029705763, 0.0039341971278190613, 0.0031743270810693502, 0.0030314316973090172, 0.0018093358958140016, 0.0035996506921947002, 0.0027027672622352839, 0.0034372913651168346, 0.0014669486554339528, 0.0034522367641329765, 0.0035952804610133171, 0.0028175266925245523, 0.0033947883639484644, 0.0020910869352519512, 0.0041036135517060757, 0.0048153158277273178, 0.0024222936481237411, 0.0046502933837473392, 0.0033811773173511028, 0.0024078947026282549, 0.0026909844018518925, 0.0030919238924980164, 0.0018599918112158775, 0.004186815582215786, 0.0036634630523622036, 0.0023144490551203489, 0.0028095643501728773, 0.0026799619663506746, 0.0036158734001219273, 0.004465591162443161, 0.0045705568045377731, 0.0029026099946349859, 0.0028624394908547401, 0.0015756303910166025, 0.0035135615617036819, 0.003414803184568882, 0.0014956759987398982, 0.0032326304353773594, 0.0039971950463950634, 0.003600291209295392, 0.003311981214210391, 0.0034173782914876938, 0.0036441483534872532, 0.0044935946352779865, 0.0025045755319297314, 0.0015714078908786178, 0.0014536714879795909, 0.0037565156817436218, 0.0035038895439356565, 0.004140250850468874, 0.0038117414806038141, 0.0033810744062066078, 0.0026329304091632366, 0.0021678803022950888, 0.0014705527573823929, } };
const TfArray<64, int> quant8_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[64] = { 95, -50, -1540, -1408, -243, -1020, -762, -1116, 394, -210, 258, -348, -797, -993, -289, -509, -814, -861, -354, -982, -453, -260, -592, -622, -1117, -898, -6, 956, -768, -1345, -532, -480, -41, 283, 147, -154, -402, 35, -200, -270, -100, -664, -1077, 527, -300, -1120, -876, -453, -605, -1488, -743, -310, 1, -718, -654, -1111, -522, -374, -354, -933, -722, -103, -764, -840, };
const TfArray<1, int> tensor_dimension9 = { 1, { 64 } };
const TfArray<64, float> quant9_scale = { 64, { 0.00014118346734903753, 9.9466895335353911e-05, 5.6502998631913215e-05, 6.6568158217705786e-05, 0.00012238453200552613, 6.6217544372193515e-05, 0.00010817909060278907, 0.00010712894436437637, 0.00012301912647671998, 0.00011605342297116295, 0.00013572568423114717, 0.00010951096192002296, 0.00010458121687406674, 6.2420192989520729e-05, 0.00012418418191373348, 9.3242641014512628e-05, 0.0001185829532914795, 5.0608192395884544e-05, 0.00011909854947589338, 0.00012403340952005237, 9.7201722383033484e-05, 0.00011711664410540834, 7.2140312113333493e-05, 0.00014157037367112935, 0.00016612335457466543, 8.3566592365968972e-05, 0.00016043025243561715, 0.00011664707562886178, 8.3069848187733442e-05, 9.2836140538565814e-05, 0.00010666813614079729, 6.4167768869083375e-05, 0.00014444075350183994, 0.0001263856393052265, 7.9846067819744349e-05, 9.6927025879267603e-05, 9.2455877165775746e-05, 0.00012474384857341647, 0.00015405821613967419, 0.00015767941658850759, 0.00010013700375566259, 9.8751166660804302e-05, 5.4357598855858669e-05, 0.00012121419422328472, 0.00011780713248299435, 5.1599254220491275e-05, 0.0001115223640226759, 0.00013789904187433422, 0.00012420627172105014, 0.0001142598848673515, 0.00011789597192546353, 0.00012571930710691959, 0.00015502430323977023, 8.6405234469566494e-05, 5.4211926908465102e-05, 5.015014176024124e-05, 0.00012959585001226515, 0.00012088051880709827, 0.00014283432392403483, 0.00013150108861736953, 0.00011664352496154606, 9.0833338617812842e-05, 7.4789597420021892e-05, 5.0732531235553324e-05, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[6*640] = { 
  -38, -60, 5, -3, -60, -18, 1, 14, -10, -4, -9, 12, -3, -1, -56, -7, 15, 2, -37, -48, -12, -12, 15, 1, -28, -8, -101, 35, -17, -3, -17, -11, -1, -5, -17, 21, -8, -31, 10, 3, 10, 41, 18, -94, -7, 7, 6, 0, -15, 24, 21, -37, 19, -20, 7, -7, -5, -89, 28, 18, 15, 4, 7, 4, -20, -1, 11, -10, -47, 7, -15, 2, -36, -35, -29, 33, 0, 8, -11, -9, 4, 5, 1, -18, -28, -25, 10, 13, -60, -8, 12, 22, -19, 6, -9, -21, 9, -15, -59, 36, 9, 1, 30, -2, -9, 32, -9, -2, 37, 7, -15, -12, -35, 25, 0, -31, 2, -2, 9, -13, -10, -41, -12, -24, 51, -23, 2, -6, -17, -19, 0, -12, -50, 11, -12, -19, 16, -27, 0, 22, -15, 19, -28, -7, -26, -4, -19, -77, -41, -40, 1, 27, -43, 8, 19, 62, -18, -9, 9, -6, -50, 18, -34, 2, 6, 10, 41, 8, -8, 13, -9, -26, 9, 4, 23, -3, -12, 37, -49, -17, 23, -10, -22, -14, -7, -42, 26, -9, 58, -8, 10, 8, 16, -10, -18, 12, -81, 4, 44, -39, -8, -8, 14, 28, -35, 8, -15, 25, -8, 10, -6, -109, -19, -13, 13, -7, -20, -18, -5, 48, 7, -24, 31, -7, -15, 9, -36, 19, 11, -46, 62, -1, 23, -22, -7, -10, 9, -7, 23, 9, -20, 38, -1, -34, -33, -8, -2, 10, -18, -55, 29, -57, 52, 26, -11, 0, 43, -29, 14, -11, -74, -4, -6, -40, -8, 40, -25, 36, -33, -25, -38, -9, -33, 11, -6, -21, -10, -12, 1, 33, -38, -8, 22, 56, -23, -22, 7, -19, -19, 40, -15, -26, -12, -21, 39, 10, 18, -56, 13, -1, -9, 16, 28, -13, -12, 59, -19, -30, -2, 29, 12, 14, -25, -31, 27, -1, 61, 20, 2, 5, 31, -17, -7, -10, -94, -3, 22, -59, -9, 27, -11, 16, -45, 4, -36, -27, -58, 17, -39, -34, -17, -7, 6, -21, -61, -16, -4, 58, -2, 6, -3, 11, -8, 60, -2, 18, 3, -27, 58, 25, 6, -24, -2, 12, -3, -3, 15, -9, -6, 5, -45, -2, -11, 9, 13, -10, -41, -36, 21, -14, 36, -26, 16, 9, 16, -41, -1, -10, -40, -1, 8, -52, -1, 6, -7, 23, -49, -16, 3, 2, -37, -2, -28, -24, -44, -6, -13, 1, -23, 6, 12, 19, -13, 16, -6, 6, -36, 49, -14, 6, 9, 16, 45, 18, -8, -18, -9, 7, -20, -9, 16, -19, -63, 39, -1, -27, -3, 4, 8, 16, -36, -6, 0, -22, 45, 8, 15, 13, 23, -31, 6, -8, -16, 14, 26, -25, 4, -12, 12, 19, -7, -4, -11, 9, -1, 16, -29, -35, -5, 5, -1, 17, -19, -15, -3, -3, -25, -28, -5, 6, -17, 14, -33, 11, 5, -56, 31, 19, -9, -36, -6, 27, -3, 5, 28, 21, -46, 33, 73, -18, 12, 0, -11, -3, -87, -29, 13, -18, 51, -40, -13, -15, 45, -4, 4, -17, 6, 7, -15, -19, -2, 43, 1, 31, -10, -1, -54, -24, -33, -4, -38, 17, 4, 2, -8, -13, 1, -11, -6, -10, -27, 12, -4, -1, -3, 11, -23, 32, -6, -49, 49, 7, -22, -55, -3, 6, -8, 17, 16, -9, -15, 27, -2, 1, 3, 23, -3, -1, -18, -17, 13, 29, 4, -9, -15, -12, -2, 1, -2, -12, 12, 4, 0, 15, 8, 28, -1, -10, -3, -7, -5, -11, -26, -15, -16, -6, -5, 19, -34, 19, 15, -5, 27, -14, -16, -2, -30, 17, -24, 7, 11, 21, -6, -23, 36, 10, -5, 28, -7, 4, 15, 5, 9, 0, 2, -45, 0, 9, 0, -4, -14, 0, -41, -1, 55, 34, -5, 9, 8, 0, 
  31, 27, 7, 1, -15, -15, -19, -24, -29, 16, 15, -7, -37, -26, -10, -18, -21, 9, -5, -7, 24, -9, -4, 13, -19, -35, -39, 4, 18, -6, -11, -9, 5, -19, 22, -81, 25, 10, 11, -16, 77, -9, -12, -38, 69, -11, -12, 20, 12, 15, 3, 40, -5, 28, 6, 1, -2, -35, 17, -10, -28, -18, -9, 7, 23, 32, -8, -3, 5, 7, 11, -18, -8, -8, -8, 23, 5, -22, -11, -8, -54, 8, -29, 1, 35, -16, 18, -2, -5, 1, -86, 26, 18, 6, -10, -26, -9, -48, 16, -66, 20, -36, 8, -61, 22, -24, -21, -27, 18, 2, -49, 9, 9, 25, -5, 17, -47, 3, -9, 4, 5, -56, 8, -75, 2, -23, 2, -11, 24, 1, -7, 6, 27, 12, -5, -24, -10, -22, -4, 9, -3, -3, 24, 4, -38, 7, 15, 16, 15, 32, 4, -4, -36, -14, -87, -32, 29, 3, -21, -1, -15, -78, -20, -43, 35, -23, -22, -10, 39, 9, 12, -31, 26, 9, 2, -28, 10, -9, 14, -4, -35, 41, -13, 2, -9, -47, -7, -35, -26, -21, -2, 10, -36, 7, -16, 16, 21, 9, -26, 19, 18, 16, -46, -9, 16, -10, 3, -11, -41, 12, -29, -8, 1, 15, 3, -12, -55, -5, -94, -11, 28, -21, -5, -17, 3, -53, -3, -23, 18, -12, -28, -29, 28, 3, 9, -37, -3, 5, -8, -20, -35, 15, 23, -7, -20, 8, 4, -2, 2, -47, 11, 5, -20, -37, 8, -5, -33, 14, 14, -8, -32, 5, -34, 18, -36, -7, -17, 14, 1, -14, -8, 17, -30, -2, 0, 18, 2, -2, 12, -43, -42, 2, -120, -28, 35, 8, -22, -19, 9, -39, 20, -19, 13, -19, -22, -40, 29, 8, 10, -43, 21, -17, 0, -49, -45, -8, -12, 14, -32, 12, -10, -1, -6, -45, -35, -16, -11, -13, -5, 2, -20, 25, 0, 21, 8, -11, -7, 17, 7, -18, -31, -2, 3, 12, 7, 23, -45, -1, -4, -15, 9, -50, 2, -48, -50, 16, -112, -8, 7, 35, -33, -21, -31, -74, 4, -16, 15, -29, -16, -32, 36, -35, -9, -33, 37, -18, 0, -28, -19, 10, 17, 9, -60, 2, -5, -21, -1, -68, -31, -37, 5, -31, 2, 14, -42, 12, -6, 1, 23, -4, -14, 13, -27, -25, -53, 11, -12, 8, 23, -4, -27, -9, -14, -8, -41, 21, -10, -25, -29, 3, -75, 30, 29, 2, -12, 0, -26, -69, 15, 0, -12, -3, -5, -56, 28, 40, -2, -39, 40, 10, 4, -35, -4, 3, -32, 25, -8, 26, -3, 0, -11, -50, 4, 23, 15, 3, -4, 7, -34, 16, 1, 13, -55, -1, -20, -3, -14, 20, -10, -13, 8, 4, -14, 10, -37, -15, -24, 18, -10, 26, -7, -20, -57, 14, -127, 31, 47, 19, -14, -9, -26, -62, 14, -12, -5, -23, -7, -20, 38, 37, -3, -33, 14, 4, -5, -33, -3, 5, -23, 17, -40, -13, -18, -19, 16, -46, -4, -20, -17, -17, 7, 6, -5, 10, 7, -13, -18, 10, -27, 2, -9, -18, 22, 4, -28, -2, 11, -14, -51, -18, 9, -28, 11, 17, 8, 0, -34, 22, -92, 58, 33, -18, -26, -7, -54, -42, 3, -60, -7, -49, -30, -37, 35, 39, 7, 11, 18, -16, -28, -1, -7, 19, -48, 4, -6, -2, 3, 4, -24, -37, 21, -76, -4, -52, -1, -4, -42, -17, 14, 26, -34, -6, -27, -14, -12, 0, -51, 6, -5, -8, 8, 8, -34, -14, -18, 2, 3, 23, -7, -37, 13, -3, -32, 7, -6, 6, -20, 10, -20, -4, -8, -43, 42, 2, 11, -66, 10, 22, 12, 4, 35, -4, -14, -27, -24, -12, 23, -20, -17, -14, -2, 0, -12, -28, -7, -16, 24, 0, -13, 2, 
  -27, -25, 10, -28, 32, -16, -39, 15, -35, 17, -38, -57, 8, -3, 25, -2, -4, 17, 9, 18, -9, -43, -43, 7, -10, -23, -10, 3, -38, -17, -21, -3, 20, 6, -19, 7, -7, 22, -20, -24, -30, 3, 5, 69, -29, 4, -5, 9, 4, -23, 7, 39, 16, -33, 6, -7, -10, 31, -2, 13, -26, -24, -32, 5, 8, -12, 5, -17, 22, 10, -5, 4, -11, -1, -42, -28, 16, 17, 36, 0, 17, -9, 24, -2, 14, 23, 7, -12, 6, -20, 19, -22, -4, -14, 2, 0, 17, 14, -27, 29, -41, 56, -13, 34, -26, 8, 6, 25, 2, 0, -27, -27, -32, -18, 39, 29, -30, -2, -20, -10, -14, 25, 1, -8, -8, 11, -30, 14, -5, 40, -16, 25, 37, 6, 0, 31, -15, 30, -47, -44, -21, 8, 30, -11, 20, -2, -4, -20, 1, -17, -12, -51, -14, -1, 18, -9, -5, -6, -29, -7, 41, 31, -7, -18, -6, 34, -40, -2, -48, 6, -5, 61, -2, -16, -14, -29, -46, 4, 11, 28, 0, -23, -15, -5, -24, 25, -13, 30, -36, 29, -4, 14, 37, -1, -6, -9, 8, 0, -42, 23, -8, 28, -82, 1, -34, -2, 32, -21, -52, -3, -35, 0, -37, -28, 7, -55, -30, -5, 0, -13, -10, 15, 1, 9, 33, 22, -24, 25, -40, 29, -29, -5, -20, 11, -12, 25, 25, -3, 18, -64, -50, -42, -27, 8, -55, -6, 10, -2, -47, 20, -20, 22, -31, 10, -18, -7, 37, 34, 16, 6, 49, 2, -3, 6, 27, 5, -71, -25, -54, -5, 42, 1, -22, 6, -9, -6, -36, -13, -8, -47, -56, -31, 4, -21, -17, 12, -13, 15, 34, 26, -19, 16, -37, 45, -52, 40, -47, 8, 7, 31, -6, 5, -10, -54, -35, -11, 2, -16, -49, 7, -24, 13, -16, 37, -37, -2, -31, -15, -6, -13, 31, 10, 0, 3, 15, 6, -10, 38, -11, 31, -60, -19, -59, 14, 38, -3, -48, -10, -17, -1, -10, 17, 4, -16, -22, -27, 3, -48, -35, 3, -3, 9, 33, 25, -26, -6, 12, 43, -42, 4, -52, -20, 2, 57, -12, -13, -24, -14, -74, -9, -21, -22, -12, 25, -16, -17, 9, 27, -21, -5, -36, -8, -15, 0, 19, -47, 8, -20, -23, 12, -11, 2, -18, 4, -91, -9, -41, 13, 32, 14, -47, -5, -12, 0, 9, 38, 7, -56, -27, -1, 12, -14, -25, -25, 13, -8, 31, 23, 0, -9, -19, 50, -44, 27, -21, -6, -12, 17, -9, 1, 18, -70, -24, -15, -41, 1, -62, 18, 4, -14, -24, 0, -25, -18, -52, 39, -17, 6, 14, -14, 7, -15, 9, 4, 2, -2, -20, 36, -42, -7, -19, 3, -12, -11, -11, 2, 20, -3, 25, 12, -8, -14, -46, 4, 11, -16, -18, -19, 21, -3, 29, 31, 1, 31, -19, 12, -15, 15, -16, -13, 2, -4, -13, 5, 14, -8, -38, -7, -31, -12, -21, 21, 2, -12, -8, -3, -30, -9, -8, 20, -22, -20, 17, -15, -6, -14, 13, -7, 8, -10, -11, 47, -45, -18, -46, 5, 43, -16, -7, 2, -10, -23, 28, -8, 14, -15, 4, -4, 17, 30, 7, -27, 0, -9, 6, 19, -22, 46, -11, 9, -48, 20, -16, -21, -2, 7, -17, 1, 17, -20, -45, 6, -31, -6, -25, 3, -9, -11, -1, 11, -35, 0, -13, 3, -19, -13, 40, 26, 0, -8, 32, -8, -8, 12, -8, 26, 1, -21, -3, 15, 23, -1, 26, 15, 16, 13, 0, 1, 14, -16, 14, 8, -17, -11, -10, -10, 9, 0, 16, 22, -2, 25, -41, 23, -6, 28, -23, -1, -7, 46, -1, 4, 31, -12, -15, 23, -17, -8, 11, 18, 20, -23, -20, -20, -2, 32, -13, 16, 10, -10, 
  -7, 38, 0, 5, -24, 13, 34, -9, 10, -17, 10, 15, 13, 2, 3, 1, 33, -6, 29, 16, -4, -8, -4, 38, 8, 41, 6, -42, 14, -12, -31, 15, 4, 23, 34, -3, 3, 0, -36, 7, -28, -10, -10, -29, -44, 14, 49, 1, 8, -3, -20, 7, 24, 4, 11, 11, -18, -3, 9, 11, -10, 22, 21, -21, -13, 11, -7, 32, -38, 13, -23, 7, -12, -9, 11, 6, 31, -4, -49, 5, 17, -12, 15, 28, 3, 0, 4, 36, 10, 21, -23, -75, -8, 13, -30, 2, -66, -7, 17, -6, 0, 11, -62, -5, 10, 2, 8, -31, 17, -11, 13, -16, -3, 2, -15, 17, 9, 19, 0, -1, 6, -35, -17, -12, -16, -1, 15, 6, -23, 12, 9, -22, -28, 15, -8, -15, -13, -39, 18, 39, 22, -11, -78, -7, 20, -5, 19, 24, -16, -15, -19, 1, 18, 23, -3, -8, -8, 26, -29, -10, -52, -8, 42, -11, 12, -53, 9, -81, -3, 17, -6, -22, -17, 11, -27, 1, -6, 2, -16, -1, 26, 0, 4, 3, 27, 7, 19, -23, -27, -1, 11, 8, 18, 30, -2, -10, 12, 15, -5, -2, -23, -13, 26, 10, 26, -4, -24, -9, 47, -2, 29, 32, 2, -38, 14, 14, 50, 17, -5, -20, -30, -13, -15, 12, -30, -8, -14, -24, 8, 0, 1, -44, -24, -10, 8, -5, -9, -11, -22, 15, 20, 2, 12, 8, 49, -31, -15, 5, 25, -14, -6, -18, 1, -57, 7, -9, -23, 45, -4, 8, -18, 15, 5, -24, -31, -77, 27, 20, 31, -8, -27, -24, 32, 4, 22, 20, 31, 24, -11, -8, 52, 13, -31, -47, -5, 16, -49, -10, -72, -10, 21, -14, -28, 0, -11, -74, 2, -31, 10, -4, -31, 6, 5, 23, 19, -18, -17, 4, 32, 11, -11, -13, 16, -5, -1, -19, -26, -18, -3, 7, -61, 13, -4, -9, -21, -7, 30, -6, -13, -37, 45, -4, 54, 9, -65, -7, 55, 2, 28, 29, -9, 28, 15, 23, 63, 42, -30, -44, -6, -15, -65, 3, -35, -22, 17, -4, 5, -13, 26, -73, 17, 17, 6, -28, -2, 4, 17, 15, 4, -16, 27, 13, 17, -13, 15, -9, 31, -23, 55, 7, -7, 8, -18, 8, -44, -7, 5, 3, -31, 4, 6, 6, 19, -41, 39, 2, 47, 14, -70, 12, 41, 1, 16, 3, -1, -10, 2, 18, 21, 5, -12, -61, -16, -10, -38, -1, -43, -11, -4, 5, 5, -17, 4, -36, -21, 6, 9, 19, -25, -11, -36, 16, 5, -12, 30, -8, 34, -11, -6, 0, 24, 1, -9, 0, -4, -8, -6, -8, -18, 1, -5, 14, -26, -7, -24, -21, 18, -50, 21, 4, 44, 11, -54, 19, 23, 4, 1, 38, 14, 2, 9, 17, 34, 4, 8, 23, -2, 7, -44, 25, -57, -5, 2, -3, -31, -2, -1, -34, 14, -9, 8, 0, -23, -16, -13, 9, 22, -15, 22, -5, -19, -21, -11, -24, 15, -4, -5, 20, -21, -20, -8, 7, -2, -7, 8, -2, 15, -6, 8, -20, 7, -7, 6, -40, 30, 10, -34, 10, 1, -11, -25, 4, -6, 0, 5, 27, 27, -28, -22, -13, -7, -5, -26, -3, -4, 15, -6, -38, -49, 31, 1, -26, -4, 9, -10, -8, -8, 10, -25, 9, 21, -20, 10, -18, 31, -20, -4, -1, 8, 0, -5, 7, -4, 6, 18, 8, -17, -12, 3, 13, 19, -18, 20, 5, 33, -15, 47, 3, 17, 14, -20, 1, -43, -2, 20, 25, 3, -37, -10, 3, 6, -11, -33, -11, 3, -8, -23, 1, -38, 8, 19, -32, -5, -24, 23, -56, 2, -7, 12, 5, -32, -8, -15, 22, 14, -10, -18, 8, -23, -12, -4, -3, -24, -24, -3, -30, 1, -3, -16, 8, 
  -40, 11, 2, 28, 5, -1, 19, -25, 21, -6, 6, 2, 10, -5, -36, 19, 9, 5, -11, 5, -20, 26, 9, -54, -11, -11, -47, 19, 11, 2, 13, 1, 3, -13, 9, 24, -53, -17, -38, 1, -33, 1, 5, -21, -21, -11, -5, -30, -11, -5, -44, 17, 5, 2, -10, 20, -20, -43, -34, -63, -5, 8, -6, 8, -23, 16, 11, -10, -19, -7, 11, -10, 25, 50, 11, 2, 24, 9, -15, 4, -11, 14, -29, 12, -36, 0, 3, -17, -9, -5, 9, 9, 4, 7, 26, 0, 19, 7, 0, 17, -9, -34, 9, 13, -32, 16, -13, 27, -35, -5, -44, -16, -19, -1, 0, 25, 53, 16, -6, -1, 17, 5, 51, 7, -3, 4, 28, 6, 9, -12, 14, 26, -27, 16, 36, -11, 9, 23, 10, -17, 19, -16, 7, 0, -9, 0, -3, 18, -21, 30, -14, -1, -1, 15, -17, -8, 14, 5, 22, -11, 51, 3, -5, 8, -27, -21, 19, 28, -9, -7, 14, 23, -18, -23, -6, -1, -3, -5, 22, -4, -3, 13, -13, -9, 25, -13, -17, -52, -7, -27, 29, 9, -36, 26, 0, 7, 14, 8, -7, -30, 35, 30, 0, 13, 22, -12, 7, -18, 20, -15, 4, 10, -14, 26, 19, 2, -10, 2, 5, -43, -5, 25, 42, -20, 10, -6, 7, -2, -1, 38, -2, 16, -10, 2, -14, 9, -14, -7, 21, -20, 6, -17, -3, 42, 56, 0, -15, -2, 13, 10, 19, -28, -4, 21, -20, -10, -52, -9, 10, 13, -3, -14, 0, -7, 5, -14, -6, 14, 13, 4, -4, 7, 26, -9, -66, 9, -23, -6, 32, 15, -4, 3, -19, -30, 8, -6, 24, 7, 16, -20, -8, 6, 12, -9, -9, 34, -20, 36, -10, -10, 26, 9, -14, -5, 11, -30, -39, 46, 32, 5, -8, 3, -14, 27, 39, 31, -3, -6, -19, -4, -13, -38, 6, -3, -10, -4, -38, -30, -3, -14, -13, 20, 36, 4, 2, -19, 38, -5, 21, 5, -12, 23, -8, 17, 7, -3, -3, -14, -7, 5, 20, -7, 12, 4, -21, 1, 10, 13, -10, 11, -5, -7, -13, 0, 11, -2, 0, 2, 17, -2, 19, 15, 27, -1, 0, -6, 13, 19, -15, -3, 1, 14, 15, 14, -25, 27, 9, 27, -3, 1, -12, -23, 1, 5, -21, -3, 29, 5, -16, -24, -5, 12, 36, 5, 8, -32, 7, -14, -1, 2, -3, 12, 6, 33, 29, 3, 25, -15, -3, 5, -8, -42, 5, 34, -17, 6, 8, -48, 18, -11, -13, -25, -2, 14, -43, 41, 38, -15, -3, -19, 46, 28, 24, -38, -34, -2, 18, -1, -12, 8, 14, 12, 28, 5, -25, 3, -7, 6, -15, 13, -7, 0, 25, -25, 10, -3, 29, 3, -25, -6, 17, -20, -21, 5, -2, -12, -18, -2, 28, 1, 24, 3, -36, -7, 53, 38, -17, 28, -35, 35, 11, -48, 0, -12, -5, -20, -5, -3, -57, 16, 24, 12, -14, -10, 18, 20, -10, -20, -29, -8, 6, -2, -44, 11, -1, -19, -22, 17, 3, 11, -22, 15, -25, 23, 17, -3, 4, -15, 1, -17, 32, 14, -33, -44, 8, -20, -11, 8, -24, -4, -17, -3, 4, 9, -2, -13, -23, 4, -11, -1, -4, 18, -16, 20, -11, -5, 10, -12, 9, -9, -13, 23, 24, 8, -20, -2, 5, -8, 10, 13, -12, -87, -23, -17, -2, 1, -7, 0, -16, -23, -13, 14, -33, -6, -8, -25, -11, 6, 27, 2, 8, -15, 2, -1, 0, -12, -26, -4, 13, -13, -11, -9, -32, -16, -15, 12, 26, -15, 38, -12, -7, 12, -5, -21, -59, 14, -4, -13, -7, -10, 16, 10, -9, -15, 4, 23, 15, -14, 17, 11, 7, -6, 59, -6, -4, -13, -16, -35, 21, -10, 
  0, 4, 10, 6, 12, -8, -15, 19, 29, -6, 19, 17, -13, 19, 40, 7, -26, -11, 13, -13, -20, 28, -16, 4, -15, -6, 28, -21, 5, -10, 30, -29, 20, -2, -1, -7, 8, 0, 38, -3, 11, -22, -4, 36, 13, 13, -25, 17, -5, 23, 10, -48, -75, 2, 15, 0, 26, 18, 3, -8, 16, -5, 0, -4, 5, -54, 10, 6, 40, -5, 22, 10, 9, -8, 27, -18, -27, 6, 2, 15, -12, -2, 3, -44, 12, 32, -11, 21, -35, -11, 12, -12, -1, -39, 12, -24, 5, -29, -7, -3, -9, -40, -58, 9, 16, -4, -11, -32, -48, -6, 54, 42, 40, -11, -31, -32, -60, 5, -1, 13, -9, 11, 3, -6, -50, -3, -15, 4, 7, 13, 24, -5, 47, 5, 6, 11, 18, 9, -2, -38, -48, 0, 19, 1, -23, -18, -11, -34, 2, -2, 4, 32, -5, 1, 15, 5, 13, -49, 3, 12, 10, -33, -29, 1, -18, -20, -84, -10, -14, -11, 1, -53, 12, 6, -7, 49, 40, -26, 10, -23, -32, 23, -17, -3, 3, 18, -50, -6, -35, 21, -18, -8, -10, 6, 0, -43, 8, 3, 16, 33, 13, -4, 20, -26, -25, -7, -3, 19, -30, -3, -33, -38, 26, -7, -20, 19, -37, 6, 0, -33, 1, 11, -69, 7, -55, -37, 22, -23, 16, -36, -19, -8, 10, -4, -13, -5, 0, 8, -11, 34, 53, -34, -24, -18, -41, 11, 8, -1, 0, 35, -3, -17, -18, 17, 17, 8, -22, -21, 8, -13, 50, -2, 27, 18, 20, -8, 38, -48, -12, 9, 7, 14, -43, -1, 9, -46, 34, -21, -37, 29, -36, 3, 10, -3, 18, -5, -14, 13, -49, -9, -15, -2, 2, -18, -25, 11, -12, 17, 7, -11, -16, -1, -39, 57, 15, 8, 14, -49, -37, -26, -9, -15, 20, 12, -6, -63, -1, 6, 14, -8, -38, 0, 9, 6, 9, -7, 2, 24, -16, -4, 8, -31, -44, 1, 30, -6, -98, -20, -34, -82, 15, -16, -6, 57, -71, -47, -14, -19, -3, 11, -18, 8, -27, -26, -14, -19, 19, -10, -26, 9, 11, 15, 13, -51, 12, -16, -6, 38, 48, 2, -37, -73, -7, -18, -9, -7, -49, 36, -21, -37, -28, -6, -9, 8, -23, -1, 2, -12, 40, 7, -3, 25, 10, -20, 35, -31, -38, -6, -6, 9, -24, -8, 0, -47, 33, -21, -2, 26, -23, -15, -5, -10, 27, -12, -12, 0, -49, -38, 28, -2, 8, 3, -45, -31, 1, -28, 11, 3, -15, 2, -8, 50, 34, -34, -4, 5, -41, -6, -11, -15, -48, 17, -5, -8, 4, -5, -5, 17, -23, -4, -9, -18, 25, 2, 17, 19, 20, 3, 20, -30, -13, 6, 17, 11, -37, -3, 10, -31, -2, -16, -19, 27, -42, -26, 2, 4, 25, 20, -10, -23, -5, -23, -12, -6, -2, 2, -46, -14, -6, -41, -8, 47, -24, -17, -23, 24, 26, 17, 20, -5, -27, 0, -4, 13, -12, 23, 11, -23, -9, 13, -6, -17, -41, 7, 12, 7, 16, 11, -7, -6, 40, -30, 23, -2, 0, -2, -3, 25, -11, 0, 19, -11, 6, -15, 5, 17, -24, 8, 9, -36, 15, 14, 7, -9, 9, -37, 31, -4, 21, 33, -16, -30, 3, 13, 1, -45, -13, -3, 12, 19, 37, -4, -5, -12, -32, -17, 16, -9, -13, 5, -12, -4, 7, 2, 0, 9, -13, 19, -14, 9, -31, -22, 27, -21, 11, -29, 19, -8, -10, 0, 6, 4, 11, -18, 24, -34, -7, 5, 0, -11, -14, 21, 0, 16, 13, -12, 11, -8, -62, -34, -9, -29, -20, -22, -18, -10, 2, -25, 3, -21, -36, -3, 11, 14, 18, 6, 9, -33, -8, -7, -18, 15, -16, -7, -10, 10, -1, 18, -7, 6, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 6,640 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0056998166255652905, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[6] = { -400, 486, -267, -274, 159, 305, };
const TfArray<1, int> tensor_dimension11 = { 1, { 6 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0002238905435660854, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,39,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.04968397319316864, } };
const TfArray<1, int> quant12_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,39,32 } };
const TfArray<1, float> quant13_scale = { 1, { 0.034498952329158783, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,39,1,32 } };
const TfArray<1, float> quant14_scale = { 1, { 0.034498952329158783, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,20,1,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.034498952329158783, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,20,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.034498952329158783, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,20,64 } };
const TfArray<1, float> quant17_scale = { 1, { 0.039280306547880173, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,20,1,64 } };
const TfArray<1, float> quant18_scale = { 1, { 0.039280306547880173, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,10,1,64 } };
const TfArray<1, float> quant19_scale = { 1, { 0.039280306547880173, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,640 } };
const TfArray<1, float> quant20_scale = { 1, { 0.039280306547880173, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,6 } };
const TfArray<1, float> quant21_scale = { 1, { 0.14055193960666656, } };
const TfArray<1, int> quant21_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,6 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension0, 507, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 3840, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 507, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1248, (TfLiteIntArray*)&tensor_dimension13, 1248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 1248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1248, (TfLiteIntArray*)&tensor_dimension15, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1280, (TfLiteIntArray*)&tensor_dimension17, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1280, (TfLiteIntArray*)&tensor_dimension19, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension21, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
  if (i < 0) {
    tensor->data.data = nullptr;
    tensor->dims = nullptr;
    return;
  }

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus tflite_learn_8_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_8_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteStatus tflite_learn_8_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
